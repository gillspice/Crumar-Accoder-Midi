C51 COMPILER V9.51   USB_BOOT                                                              07/22/2017 09:26:19 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_BOOT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_boot.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\USB_boot.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.
                    -\DP8051\DP8051_Keil_951\Debug/USB_boot.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_boot.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USB_boot.c
   3          * \version 3.10
   4          *
   5          * \brief
   6          *  This file contains the Bootloader API for USBFS Component.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "USB_pvt.h"
  17          
  18          #if defined(CYDEV_BOOTLOADER_IO_COMP) && ((CYDEV_BOOTLOADER_IO_COMP == CyBtldr_USB) || \
  19                                                    (CYDEV_BOOTLOADER_IO_COMP == CyBtldr_Custom_Interface))   
              
              /***************************************
              *    Bootloader Variables
              ***************************************/
                  
              
              static uint8  USB_started = 0u;
              
              
              /*******************************************************************************
              * Function Name: USB_CyBtldrCommStart
              ****************************************************************************//**
              *
              *  This function performs all required initialization for the USBFS component, 
              *  waits on enumeration, and enables communication.
              *
              * \sideeffect
              *  This function starts the USB with 3V or 5V operation.
              *
              * \reentrant
              *  No.
              *
              *******************************************************************************/
              void USB_CyBtldrCommStart(void) 
              {
                  /* Enable Global Interrupts. Interrupts are mandatory for USBFS component operation. */
                  CyGlobalIntEnable;
              
                  /* Start USBFS Operation: device 0 and with 5V or 3V operation depend on Voltage Configuration in DWR.
             - */
                  USB_Start(0u, USB_DWR_POWER_OPERATION);
              
                  /* USB component started, the correct enumeration will be checked in the first Read operation. */
                  USB_started = 1u;
C51 COMPILER V9.51   USB_BOOT                                                              07/22/2017 09:26:19 PAGE 2   

              }
              
              
              /*******************************************************************************
              * Function Name: USB_CyBtldrCommStop.
              ****************************************************************************//**
              *
              *  This function performs all necessary shutdown tasks required for the USBFS 
              *  component.
              *  
              *  \sideeffect
              *   Calls the USBFS_Stop() function.
              *
              *******************************************************************************/
              void USB_CyBtldrCommStop(void) 
              {
                  USB_Stop();
              }
              
              
              /*******************************************************************************
              * Function Name: USB_CyBtldrCommReset.
              ****************************************************************************//**
              *
              *  This function resets receive and transmit communication buffers.
              *
              * \reentrant
              *  No
              *
              *******************************************************************************/
              void USB_CyBtldrCommReset(void) 
              {
                  USB_EnableOutEP(USB_BTLDR_OUT_EP); 
              }
              
              
              /*******************************************************************************
              * Function Name: USB_CyBtldrCommWrite.
              ****************************************************************************//**
              *
              *  This function allows the caller to write data to the bootloader host. It 
              *  handles polling to allow a block of data to be completely sent to the host 
              *  device.
              *
              *  \param pData    A pointer to the block of data to send to the device
              *  \param size     The number of bytes to write.
              *  \param count    Pointer to an unsigned short variable to write the number of
              *                  bytes actually written.
              *  \param timeOut  Number of units to wait before returning because of a timeout.
              *
              * \return
              *  Returns CYRET_SUCCESS if no problem was encountered or returns the value that 
              *  best describes the problem. For more information, see the “Return Codes” 
              *  section of the System Reference Guide.
              *
              * \reentrant
              *  No
              *
              *******************************************************************************/
              cystatus USB_CyBtldrCommWrite(const uint8 pData[], uint16 size, uint16 *count, uint8 timeOut) CYSMALL
                                                                          
              {
C51 COMPILER V9.51   USB_BOOT                                                              07/22/2017 09:26:19 PAGE 3   

                  cystatus retCode;
                  uint16 timeoutMs;
              
                  /* Convert 10mS checks into 1mS checks. */
                  timeoutMs = ((uint16) 10u * timeOut);
              
                  /* Load data into IN endpoint to be read by host. */
                  USB_LoadInEP(USB_BTLDR_IN_EP, pData, USB_BTLDR_SIZEOF_READ_BUFFER);
              
                  /* Wait unitl host reads data from IN endpoint. */
                  while ((USB_GetEPState(USB_BTLDR_IN_EP) == USB_IN_BUFFER_FULL) &&
                         (0u != timeoutMs))
                  {
                      CyDelay(USB_BTLDR_WAIT_1_MS);
                      timeoutMs--;
                  }
              
                  if (USB_GetEPState(USB_BTLDR_IN_EP) == USB_IN_BUFFER_FULL)
                  {
                      retCode = CYRET_TIMEOUT;
                  }
                  else
                  {
                      *count = size;
                      retCode = CYRET_SUCCESS;
                  }
              
                  return (retCode);
              }
              
              
              /*******************************************************************************
              * Function Name: USB_CyBtldrCommRead.
              ****************************************************************************//**
              *
              *  This function allows the caller to read data from the bootloader host. It 
              *  handles polling to allow a block of data to be completely received from the 
              *  host device.
              *
              *  \param pData    A pointer to the area to store the block of data received
              *                  from the device.
              *  \param size     The number of bytes to read.
              *  \param count    Pointer to an unsigned short variable to write the number
              *                  of bytes actually read.
              *  \param timeOut  Number of units to wait before returning because of a timeOut.
              *                  Timeout is measured in 10s of ms.
              *
              * \return
              *  Returns CYRET_SUCCESS if no problem was encountered or returns the value that 
              *  best describes the problem. For more information, see the “Return Codes” 
              *  section of the System Reference Guide.
              *
              * \reentrant
              *  No
              *
              *******************************************************************************/
              cystatus USB_CyBtldrCommRead(uint8 pData[], uint16 size, uint16 *count, uint8 timeOut) CYSMALL
                                                                          
              {
                  cystatus retCode;
                  uint16 timeoutMs;
              
C51 COMPILER V9.51   USB_BOOT                                                              07/22/2017 09:26:19 PAGE 4   

                  /* Convert 10mS checks into 1mS checks. */
                  timeoutMs = ((uint16) 10u * timeOut);
              
                  if (size > USB_BTLDR_SIZEOF_WRITE_BUFFER)
                  {
                      size = USB_BTLDR_SIZEOF_WRITE_BUFFER;
                  }
              
                  /* Wait for enumeration first time. */
                  if (0u != USB_started)
                  {
                      /* Wait for device enumeration. */
                      while ((0u == USB_GetConfiguration()) && (0u != timeoutMs))
                      {
                          CyDelay(USB_BTLDR_WAIT_1_MS);
                          timeoutMs--;
                      }
              
                      /* Enable OUT after enumeration. */
                      if (0u != USB_GetConfiguration())
                      {
                          (void) USB_IsConfigurationChanged();  /* Clear configuration changes state status. */
                          USB_CyBtldrCommReset();
                          
                          USB_started = 0u;
                      }
                  }
                  else /* Check for configuration changes, has been done by Host. */
                  {
                      if (0u != USB_IsConfigurationChanged()) /* Host could send double SET_INTERFACE request or RESET. 
             -*/
                      {
                          if (0u != USB_GetConfiguration())   /* Init OUT endpoints when device reconfigured. */
                          {
                              USB_CyBtldrCommReset();
                          }
                      }
                  }
              
                  timeoutMs = ((uint16) 10u * timeOut); /* Re-arm timeout */
              
                  /* Wait unitl host writes data into OUT endpoint. */
                  while ((USB_GetEPState(USB_BTLDR_OUT_EP) != USB_OUT_BUFFER_FULL) && \
                         (0u != timeoutMs))
                  {
                      CyDelay(USB_BTLDR_WAIT_1_MS);
                      timeoutMs--;
                  }
              
                  /* Read data from OUT endpoint if host wrote data into it. */
                  if (USB_GetEPState(USB_BTLDR_OUT_EP) == USB_OUT_BUFFER_FULL)
                  {
                      *count = USB_ReadOutEP(USB_BTLDR_OUT_EP, pData, size);
                      retCode = CYRET_SUCCESS;
                  }
                  else
                  {
                      *count = 0u;
                      retCode = CYRET_TIMEOUT;
                  }
              
                  return (retCode);
C51 COMPILER V9.51   USB_BOOT                                                              07/22/2017 09:26:19 PAGE 5   

              }
              
              #endif /* (CYDEV_BOOTLOADER_IO_COMP == CyBtldr_USB) */
 241          
 242          
 243          /* [] END OF FILE */
C51 COMPILER V9.51   USB_BOOT                                                              07/22/2017 09:26:19 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE




MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
