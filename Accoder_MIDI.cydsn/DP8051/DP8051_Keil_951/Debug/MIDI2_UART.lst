C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE MIDI2_UART
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\MIDI2_UART.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\MIDI2_UART.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR
                    -(.\DP8051\DP8051_Keil_951\Debug/MIDI2_UART.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\MIDI2_UART.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: MIDI2_UART.c
   3          * Version 2.50
   4          *
   5          * Description:
   6          *  This file provides all API functionality of the UART component
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "MIDI2_UART.h"
  18          #if (MIDI2_UART_INTERNAL_CLOCK_USED)
                  #include "MIDI2_UART_IntClock.h"
              #endif /* End MIDI2_UART_INTERNAL_CLOCK_USED */
  21          
  22          
  23          /***************************************
  24          * Global data allocation
  25          ***************************************/
  26          
  27          uint8 MIDI2_UART_initVar = 0u;
  28          
  29          #if (MIDI2_UART_TX_INTERRUPT_ENABLED && MIDI2_UART_TX_ENABLED)
  30              volatile uint8 MIDI2_UART_txBuffer[MIDI2_UART_TX_BUFFER_SIZE];
  31              volatile uint8 MIDI2_UART_txBufferRead = 0u;
  32              uint8 MIDI2_UART_txBufferWrite = 0u;
  33          #endif /* (MIDI2_UART_TX_INTERRUPT_ENABLED && MIDI2_UART_TX_ENABLED) */
  34          
  35          #if (MIDI2_UART_RX_INTERRUPT_ENABLED && (MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED))
  36              uint8 MIDI2_UART_errorStatus = 0u;
  37              volatile uint8 MIDI2_UART_rxBuffer[MIDI2_UART_RX_BUFFER_SIZE];
  38              volatile uint8 MIDI2_UART_rxBufferRead  = 0u;
  39              volatile uint8 MIDI2_UART_rxBufferWrite = 0u;
  40              volatile uint8 MIDI2_UART_rxBufferLoopDetect = 0u;
  41              volatile uint8 MIDI2_UART_rxBufferOverflow   = 0u;
  42              #if (MIDI2_UART_RXHW_ADDRESS_ENABLED)
                      volatile uint8 MIDI2_UART_rxAddressMode = MIDI2_UART_RX_ADDRESS_MODE;
                      volatile uint8 MIDI2_UART_rxAddressDetected = 0u;
                  #endif /* (MIDI2_UART_RXHW_ADDRESS_ENABLED) */
  46          #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED && (MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED)) */
  47          
  48          
  49          /*******************************************************************************
  50          * Function Name: MIDI2_UART_Start
  51          ********************************************************************************
  52          *
  53          * Summary:
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 2   

  54          *  This is the preferred method to begin component operation.
  55          *  MIDI2_UART_Start() sets the initVar variable, calls the
  56          *  MIDI2_UART_Init() function, and then calls the
  57          *  MIDI2_UART_Enable() function.
  58          *
  59          * Parameters:
  60          *  None.
  61          *
  62          * Return:
  63          *  None.
  64          *
  65          * Global variables:
  66          *  The MIDI2_UART_intiVar variable is used to indicate initial
  67          *  configuration of this component. The variable is initialized to zero (0u)
  68          *  and set to one (1u) the first time MIDI2_UART_Start() is called. This
  69          *  allows for component initialization without re-initialization in all
  70          *  subsequent calls to the MIDI2_UART_Start() routine.
  71          *
  72          * Reentrant:
  73          *  No.
  74          *
  75          *******************************************************************************/
  76          void MIDI2_UART_Start(void) 
  77          {
  78   1          /* If not initialized then initialize all required hardware and software */
  79   1          if(MIDI2_UART_initVar == 0u)
  80   1          {
  81   2              MIDI2_UART_Init();
  82   2              MIDI2_UART_initVar = 1u;
  83   2          }
  84   1      
  85   1          MIDI2_UART_Enable();
  86   1      }
  87          
  88          
  89          /*******************************************************************************
  90          * Function Name: MIDI2_UART_Init
  91          ********************************************************************************
  92          *
  93          * Summary:
  94          *  Initializes or restores the component according to the customizer Configure
  95          *  dialog settings. It is not necessary to call MIDI2_UART_Init() because
  96          *  the MIDI2_UART_Start() API calls this function and is the preferred
  97          *  method to begin component operation.
  98          *
  99          * Parameters:
 100          *  None.
 101          *
 102          * Return:
 103          *  None.
 104          *
 105          *******************************************************************************/
 106          void MIDI2_UART_Init(void) 
 107          {
 108   1          #if(MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED)
 109   1      
 110   1              #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 111   1                  /* Set RX interrupt vector and priority */
 112   1                  (void) CyIntSetVector(MIDI2_UART_RX_VECT_NUM, &MIDI2_UART_RXISR);
 113   1                  CyIntSetPriority(MIDI2_UART_RX_VECT_NUM, MIDI2_UART_RX_PRIOR_NUM);
 114   1                  MIDI2_UART_errorStatus = 0u;
 115   1              #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 3   

 116   1      
 117   1              #if (MIDI2_UART_RXHW_ADDRESS_ENABLED)
                          MIDI2_UART_SetRxAddressMode(MIDI2_UART_RX_ADDRESS_MODE);
                          MIDI2_UART_SetRxAddress1(MIDI2_UART_RX_HW_ADDRESS1);
                          MIDI2_UART_SetRxAddress2(MIDI2_UART_RX_HW_ADDRESS2);
                      #endif /* End MIDI2_UART_RXHW_ADDRESS_ENABLED */
 122   1      
 123   1              /* Init Count7 period */
 124   1              MIDI2_UART_RXBITCTR_PERIOD_REG = MIDI2_UART_RXBITCTR_INIT;
 125   1              /* Configure the Initial RX interrupt mask */
 126   1              MIDI2_UART_RXSTATUS_MASK_REG  = MIDI2_UART_INIT_RX_INTERRUPTS_MASK;
 127   1          #endif /* End MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED*/
 128   1      
 129   1          #if(MIDI2_UART_TX_ENABLED)
 130   1              #if (MIDI2_UART_TX_INTERRUPT_ENABLED)
 131   1                  /* Set TX interrupt vector and priority */
 132   1                  (void) CyIntSetVector(MIDI2_UART_TX_VECT_NUM, &MIDI2_UART_TXISR);
 133   1                  CyIntSetPriority(MIDI2_UART_TX_VECT_NUM, MIDI2_UART_TX_PRIOR_NUM);
 134   1              #endif /* (MIDI2_UART_TX_INTERRUPT_ENABLED) */
 135   1      
 136   1              /* Write Counter Value for TX Bit Clk Generator*/
 137   1              #if (MIDI2_UART_TXCLKGEN_DP)
 138   1                  MIDI2_UART_TXBITCLKGEN_CTR_REG = MIDI2_UART_BIT_CENTER;
 139   1                  MIDI2_UART_TXBITCLKTX_COMPLETE_REG = ((MIDI2_UART_NUMBER_OF_DATA_BITS +
 140   1                              MIDI2_UART_NUMBER_OF_START_BIT) * MIDI2_UART_OVER_SAMPLE_COUNT) - 1u;
 141   1              #else
                          MIDI2_UART_TXBITCTR_PERIOD_REG = ((MIDI2_UART_NUMBER_OF_DATA_BITS +
                                      MIDI2_UART_NUMBER_OF_START_BIT) * MIDI2_UART_OVER_SAMPLE_8) - 1u;
                      #endif /* End MIDI2_UART_TXCLKGEN_DP */
 145   1      
 146   1              /* Configure the Initial TX interrupt mask */
 147   1              #if (MIDI2_UART_TX_INTERRUPT_ENABLED)
 148   1                  MIDI2_UART_TXSTATUS_MASK_REG = MIDI2_UART_TX_STS_FIFO_EMPTY;
 149   1              #else
                          MIDI2_UART_TXSTATUS_MASK_REG = MIDI2_UART_INIT_TX_INTERRUPTS_MASK;
                      #endif /*End MIDI2_UART_TX_INTERRUPT_ENABLED*/
 152   1      
 153   1          #endif /* End MIDI2_UART_TX_ENABLED */
 154   1      
 155   1          #if(MIDI2_UART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
                      MIDI2_UART_WriteControlRegister( \
                          (MIDI2_UART_ReadControlRegister() & (uint8)~MIDI2_UART_CTRL_PARITY_TYPE_MASK) | \
                          (uint8)(MIDI2_UART_PARITY_TYPE << MIDI2_UART_CTRL_PARITY_TYPE0_SHIFT) );
                  #endif /* End MIDI2_UART_PARITY_TYPE_SW */
 160   1      }
 161          
 162          
 163          /*******************************************************************************
 164          * Function Name: MIDI2_UART_Enable
 165          ********************************************************************************
 166          *
 167          * Summary:
 168          *  Activates the hardware and begins component operation. It is not necessary
 169          *  to call MIDI2_UART_Enable() because the MIDI2_UART_Start() API
 170          *  calls this function, which is the preferred method to begin component
 171          *  operation.
 172          
 173          * Parameters:
 174          *  None.
 175          *
 176          * Return:
 177          *  None.
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 4   

 178          *
 179          * Global Variables:
 180          *  MIDI2_UART_rxAddressDetected - set to initial state (0).
 181          *
 182          *******************************************************************************/
 183          void MIDI2_UART_Enable(void) 
 184          {
 185   1          uint8 enableInterrupts;
 186   1          enableInterrupts = CyEnterCriticalSection();
 187   1      
 188   1          #if (MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED)
 189   1              /* RX Counter (Count7) Enable */
 190   1              MIDI2_UART_RXBITCTR_CONTROL_REG |= MIDI2_UART_CNTR_ENABLE;
 191   1      
 192   1              /* Enable the RX Interrupt */
 193   1              MIDI2_UART_RXSTATUS_ACTL_REG  |= MIDI2_UART_INT_ENABLE;
 194   1      
 195   1              #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 196   1                  MIDI2_UART_EnableRxInt();
 197   1      
 198   1                  #if (MIDI2_UART_RXHW_ADDRESS_ENABLED)
                              MIDI2_UART_rxAddressDetected = 0u;
                          #endif /* (MIDI2_UART_RXHW_ADDRESS_ENABLED) */
 201   1              #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
 202   1          #endif /* (MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED) */
 203   1      
 204   1          #if(MIDI2_UART_TX_ENABLED)
 205   1              /* TX Counter (DP/Count7) Enable */
 206   1              #if(!MIDI2_UART_TXCLKGEN_DP)
                          MIDI2_UART_TXBITCTR_CONTROL_REG |= MIDI2_UART_CNTR_ENABLE;
                      #endif /* End MIDI2_UART_TXCLKGEN_DP */
 209   1      
 210   1              /* Enable the TX Interrupt */
 211   1              MIDI2_UART_TXSTATUS_ACTL_REG |= MIDI2_UART_INT_ENABLE;
 212   1              #if (MIDI2_UART_TX_INTERRUPT_ENABLED)
 213   1                  MIDI2_UART_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214   1                  MIDI2_UART_EnableTxInt();
 215   1              #endif /* (MIDI2_UART_TX_INTERRUPT_ENABLED) */
 216   1           #endif /* (MIDI2_UART_TX_INTERRUPT_ENABLED) */
 217   1      
 218   1          #if (MIDI2_UART_INTERNAL_CLOCK_USED)
                      MIDI2_UART_IntClock_Start();  /* Enable the clock */
                  #endif /* (MIDI2_UART_INTERNAL_CLOCK_USED) */
 221   1      
 222   1          CyExitCriticalSection(enableInterrupts);
 223   1      }
 224          
 225          
 226          /*******************************************************************************
 227          * Function Name: MIDI2_UART_Stop
 228          ********************************************************************************
 229          *
 230          * Summary:
 231          *  Disables the UART operation.
 232          *
 233          * Parameters:
 234          *  None.
 235          *
 236          * Return:
 237          *  None.
 238          *
 239          *******************************************************************************/
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 5   

 240          void MIDI2_UART_Stop(void) 
 241          {
 242   1          uint8 enableInterrupts;
 243   1          enableInterrupts = CyEnterCriticalSection();
 244   1      
 245   1          /* Write Bit Counter Disable */
 246   1          #if (MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED)
 247   1              MIDI2_UART_RXBITCTR_CONTROL_REG &= (uint8) ~MIDI2_UART_CNTR_ENABLE;
 248   1          #endif /* (MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED) */
 249   1      
 250   1          #if (MIDI2_UART_TX_ENABLED)
 251   1              #if(!MIDI2_UART_TXCLKGEN_DP)
                          MIDI2_UART_TXBITCTR_CONTROL_REG &= (uint8) ~MIDI2_UART_CNTR_ENABLE;
                      #endif /* (!MIDI2_UART_TXCLKGEN_DP) */
 254   1          #endif /* (MIDI2_UART_TX_ENABLED) */
 255   1      
 256   1          #if (MIDI2_UART_INTERNAL_CLOCK_USED)
                      MIDI2_UART_IntClock_Stop();   /* Disable the clock */
                  #endif /* (MIDI2_UART_INTERNAL_CLOCK_USED) */
 259   1      
 260   1          /* Disable internal interrupt component */
 261   1          #if (MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED)
 262   1              MIDI2_UART_RXSTATUS_ACTL_REG  &= (uint8) ~MIDI2_UART_INT_ENABLE;
 263   1      
 264   1              #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 265   1                  MIDI2_UART_DisableRxInt();
 266   1              #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
 267   1          #endif /* (MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED) */
 268   1      
 269   1          #if (MIDI2_UART_TX_ENABLED)
 270   1              MIDI2_UART_TXSTATUS_ACTL_REG &= (uint8) ~MIDI2_UART_INT_ENABLE;
 271   1      
 272   1              #if (MIDI2_UART_TX_INTERRUPT_ENABLED)
 273   1                  MIDI2_UART_DisableTxInt();
 274   1              #endif /* (MIDI2_UART_TX_INTERRUPT_ENABLED) */
 275   1          #endif /* (MIDI2_UART_TX_ENABLED) */
 276   1      
 277   1          CyExitCriticalSection(enableInterrupts);
 278   1      }
 279          
 280          
 281          /*******************************************************************************
 282          * Function Name: MIDI2_UART_ReadControlRegister
 283          ********************************************************************************
 284          *
 285          * Summary:
 286          *  Returns the current value of the control register.
 287          *
 288          * Parameters:
 289          *  None.
 290          *
 291          * Return:
 292          *  Contents of the control register.
 293          *
 294          *******************************************************************************/
 295          uint8 MIDI2_UART_ReadControlRegister(void) 
 296          {
 297   1          #if (MIDI2_UART_CONTROL_REG_REMOVED)
 298   1              return(0u);
 299   1          #else
                      return(MIDI2_UART_CONTROL_REG);
                  #endif /* (MIDI2_UART_CONTROL_REG_REMOVED) */
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 6   

 302   1      }
 303          
 304          
 305          /*******************************************************************************
 306          * Function Name: MIDI2_UART_WriteControlRegister
 307          ********************************************************************************
 308          *
 309          * Summary:
 310          *  Writes an 8-bit value into the control register
 311          *
 312          * Parameters:
 313          *  control:  control register value
 314          *
 315          * Return:
 316          *  None.
 317          *
 318          *******************************************************************************/
 319          void  MIDI2_UART_WriteControlRegister(uint8 control) 
 320          {
 321   1          #if (MIDI2_UART_CONTROL_REG_REMOVED)
 322   1              if(0u != control)
 323   1              {
 324   2                  /* Suppress compiler warning */
 325   2              }
 326   1          #else
                     MIDI2_UART_CONTROL_REG = control;
                  #endif /* (MIDI2_UART_CONTROL_REG_REMOVED) */
 329   1      }
 330          
 331          
 332          #if(MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED)
 333              /*******************************************************************************
 334              * Function Name: MIDI2_UART_SetRxInterruptMode
 335              ********************************************************************************
 336              *
 337              * Summary:
 338              *  Configures the RX interrupt sources enabled.
 339              *
 340              * Parameters:
 341              *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342              *  bit-field arrangement of the status register. This value must be a 
 343              *  combination of status register bit-masks shown below:
 344              *      MIDI2_UART_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345              *      MIDI2_UART_RX_STS_PAR_ERROR        Interrupt on parity error.
 346              *      MIDI2_UART_RX_STS_STOP_ERROR       Interrupt on stop error.
 347              *      MIDI2_UART_RX_STS_BREAK            Interrupt on break.
 348              *      MIDI2_UART_RX_STS_OVERRUN          Interrupt on overrun error.
 349              *      MIDI2_UART_RX_STS_ADDR_MATCH       Interrupt on address match.
 350              *      MIDI2_UART_RX_STS_MRKSPC           Interrupt on address detect.
 351              *
 352              * Return:
 353              *  None.
 354              *
 355              * Theory:
 356              *  Enables the output of specific status bits to the interrupt controller
 357              *
 358              *******************************************************************************/
 359              void MIDI2_UART_SetRxInterruptMode(uint8 intSrc) 
 360              {
 361   1              MIDI2_UART_RXSTATUS_MASK_REG  = intSrc;
 362   1          }
 363          
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 7   

 364          
 365              /*******************************************************************************
 366              * Function Name: MIDI2_UART_ReadRxData
 367              ********************************************************************************
 368              *
 369              * Summary:
 370              *  Returns the next byte of received data. This function returns data without
 371              *  checking the status. You must check the status separately.
 372              *
 373              * Parameters:
 374              *  None.
 375              *
 376              * Return:
 377              *  Received data from RX register
 378              *
 379              * Global Variables:
 380              *  MIDI2_UART_rxBuffer - RAM buffer pointer for save received data.
 381              *  MIDI2_UART_rxBufferWrite - cyclic index for write to rxBuffer,
 382              *     checked to identify new data.
 383              *  MIDI2_UART_rxBufferRead - cyclic index for read from rxBuffer,
 384              *     incremented after each byte has been read from buffer.
 385              *  MIDI2_UART_rxBufferLoopDetect - cleared if loop condition was detected
 386              *     in RX ISR.
 387              *
 388              * Reentrant:
 389              *  No.
 390              *
 391              *******************************************************************************/
 392              uint8 MIDI2_UART_ReadRxData(void) CYREENTRANT
 393              {
 394   1              uint8 rxData;
 395   1      
 396   1          #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 397   1      
 398   1              uint8 locRxBufferRead;
 399   1              uint8 locRxBufferWrite;
 400   1      
 401   1              /* Protect variables that could change on interrupt */
 402   1              MIDI2_UART_DisableRxInt();
 403   1      
 404   1              locRxBufferRead  = MIDI2_UART_rxBufferRead;
 405   1              locRxBufferWrite = MIDI2_UART_rxBufferWrite;
 406   1      
 407   1              if( (MIDI2_UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 408   1              {
 409   2                  rxData = MIDI2_UART_rxBuffer[locRxBufferRead];
 410   2                  locRxBufferRead++;
 411   2      
 412   2                  if(locRxBufferRead >= MIDI2_UART_RX_BUFFER_SIZE)
 413   2                  {
 414   3                      locRxBufferRead = 0u;
 415   3                  }
 416   2                  /* Update the real pointer */
 417   2                  MIDI2_UART_rxBufferRead = locRxBufferRead;
 418   2      
 419   2                  if(MIDI2_UART_rxBufferLoopDetect != 0u)
 420   2                  {
 421   3                      MIDI2_UART_rxBufferLoopDetect = 0u;
 422   3                      #if ((MIDI2_UART_RX_INTERRUPT_ENABLED) && (MIDI2_UART_FLOW_CONTROL != 0u))
                                  /* When Hardware Flow Control selected - return RX mask */
                                  #if( MIDI2_UART_HD_ENABLED )
                                      if((MIDI2_UART_CONTROL_REG & MIDI2_UART_CTRL_HD_SEND) == 0u)
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 8   

                                      {   /* In Half duplex mode return RX mask only in RX
                                          *  configuration set, otherwise
                                          *  mask will be returned in LoadRxConfig() API.
                                          */
                                          MIDI2_UART_RXSTATUS_MASK_REG  |= MIDI2_UART_RX_STS_FIFO_NOTEMPTY;
                                      }
                                  #else
                                      MIDI2_UART_RXSTATUS_MASK_REG  |= MIDI2_UART_RX_STS_FIFO_NOTEMPTY;
                                  #endif /* end MIDI2_UART_HD_ENABLED */
                              #endif /* ((MIDI2_UART_RX_INTERRUPT_ENABLED) && (MIDI2_UART_FLOW_CONTROL != 0u)) */
 436   3                  }
 437   2              }
 438   1              else
 439   1              {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440   2                  rxData = MIDI2_UART_RXDATA_REG;
 441   2              }
 442   1      
 443   1              MIDI2_UART_EnableRxInt();
 444   1      
 445   1          #else
              
                      /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
                      rxData = MIDI2_UART_RXDATA_REG;
              
                  #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
 451   1      
 452   1              return(rxData);
 453   1          }
 454          
 455          
 456              /*******************************************************************************
 457              * Function Name: MIDI2_UART_ReadRxStatus
 458              ********************************************************************************
 459              *
 460              * Summary:
 461              *  Returns the current state of the receiver status register and the software
 462              *  buffer overflow status.
 463              *
 464              * Parameters:
 465              *  None.
 466              *
 467              * Return:
 468              *  Current state of the status register.
 469              *
 470              * Side Effect:
 471              *  All status register bits are clear-on-read except
 472              *  MIDI2_UART_RX_STS_FIFO_NOTEMPTY.
 473              *  MIDI2_UART_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474              *  register read.
 475              *
 476              * Global Variables:
 477              *  MIDI2_UART_rxBufferOverflow - used to indicate overload condition.
 478              *   It set to one in RX interrupt when there isn't free space in
 479              *   MIDI2_UART_rxBufferRead to write new data. This condition returned
 480              *   and cleared to zero by this API as an
 481              *   MIDI2_UART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482              *   bits.
 483              *
 484              *******************************************************************************/
 485              uint8 MIDI2_UART_ReadRxStatus(void) 
 486              {
 487   1              uint8 status;
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 9   

 488   1      
 489   1              status = MIDI2_UART_RXSTATUS_REG & MIDI2_UART_RX_HW_MASK;
 490   1      
 491   1          #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 492   1              if(MIDI2_UART_rxBufferOverflow != 0u)
 493   1              {
 494   2                  status |= MIDI2_UART_RX_STS_SOFT_BUFF_OVER;
 495   2                  MIDI2_UART_rxBufferOverflow = 0u;
 496   2              }
 497   1          #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
 498   1      
 499   1              return(status);
 500   1          }
 501          
 502          
 503              /*******************************************************************************
 504              * Function Name: MIDI2_UART_GetChar
 505              ********************************************************************************
 506              *
 507              * Summary:
 508              *  Returns the last received byte of data. MIDI2_UART_GetChar() is
 509              *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510              *  for valid characters and 0 indicates an error occurred or no data is present.
 511              *
 512              * Parameters:
 513              *  None.
 514              *
 515              * Return:
 516              *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517              *  A returned zero signifies an error condition or no data available.
 518              *
 519              * Global Variables:
 520              *  MIDI2_UART_rxBuffer - RAM buffer pointer for save received data.
 521              *  MIDI2_UART_rxBufferWrite - cyclic index for write to rxBuffer,
 522              *     checked to identify new data.
 523              *  MIDI2_UART_rxBufferRead - cyclic index for read from rxBuffer,
 524              *     incremented after each byte has been read from buffer.
 525              *  MIDI2_UART_rxBufferLoopDetect - cleared if loop condition was detected
 526              *     in RX ISR.
 527              *
 528              * Reentrant:
 529              *  No.
 530              *
 531              *******************************************************************************/
 532              uint8 MIDI2_UART_GetChar(void) 
 533              {
 534   1              uint8 rxData = 0u;
 535   1              uint8 rxStatus;
 536   1      
 537   1          #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 538   1              uint8 locRxBufferRead;
 539   1              uint8 locRxBufferWrite;
 540   1      
 541   1              /* Protect variables that could change on interrupt */
 542   1              MIDI2_UART_DisableRxInt();
 543   1      
 544   1              locRxBufferRead  = MIDI2_UART_rxBufferRead;
 545   1              locRxBufferWrite = MIDI2_UART_rxBufferWrite;
 546   1      
 547   1              if( (MIDI2_UART_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 548   1              {
 549   2                  rxData = MIDI2_UART_rxBuffer[locRxBufferRead];
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 10  

 550   2                  locRxBufferRead++;
 551   2                  if(locRxBufferRead >= MIDI2_UART_RX_BUFFER_SIZE)
 552   2                  {
 553   3                      locRxBufferRead = 0u;
 554   3                  }
 555   2                  /* Update the real pointer */
 556   2                  MIDI2_UART_rxBufferRead = locRxBufferRead;
 557   2      
 558   2                  if(MIDI2_UART_rxBufferLoopDetect != 0u)
 559   2                  {
 560   3                      MIDI2_UART_rxBufferLoopDetect = 0u;
 561   3                      #if( (MIDI2_UART_RX_INTERRUPT_ENABLED) && (MIDI2_UART_FLOW_CONTROL != 0u) )
                                  /* When Hardware Flow Control selected - return RX mask */
                                  #if( MIDI2_UART_HD_ENABLED )
                                      if((MIDI2_UART_CONTROL_REG & MIDI2_UART_CTRL_HD_SEND) == 0u)
                                      {   /* In Half duplex mode return RX mask only if
                                          *  RX configuration set, otherwise
                                          *  mask will be returned in LoadRxConfig() API.
                                          */
                                          MIDI2_UART_RXSTATUS_MASK_REG |= MIDI2_UART_RX_STS_FIFO_NOTEMPTY;
                                      }
                                  #else
                                      MIDI2_UART_RXSTATUS_MASK_REG |= MIDI2_UART_RX_STS_FIFO_NOTEMPTY;
                                  #endif /* end MIDI2_UART_HD_ENABLED */
                              #endif /* MIDI2_UART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575   3                  }
 576   2      
 577   2              }
 578   1              else
 579   1              {   rxStatus = MIDI2_UART_RXSTATUS_REG;
 580   2                  if((rxStatus & MIDI2_UART_RX_STS_FIFO_NOTEMPTY) != 0u)
 581   2                  {   /* Read received data from FIFO */
 582   3                      rxData = MIDI2_UART_RXDATA_REG;
 583   3                      /*Check status on error*/
 584   3                      if((rxStatus & (MIDI2_UART_RX_STS_BREAK | MIDI2_UART_RX_STS_PAR_ERROR |
 585   3                                      MIDI2_UART_RX_STS_STOP_ERROR | MIDI2_UART_RX_STS_OVERRUN)) != 0u)
 586   3                      {
 587   4                          rxData = 0u;
 588   4                      }
 589   3                  }
 590   2              }
 591   1      
 592   1              MIDI2_UART_EnableRxInt();
 593   1      
 594   1          #else
              
                      rxStatus =MIDI2_UART_RXSTATUS_REG;
                      if((rxStatus & MIDI2_UART_RX_STS_FIFO_NOTEMPTY) != 0u)
                      {
                          /* Read received data from FIFO */
                          rxData = MIDI2_UART_RXDATA_REG;
              
                          /*Check status on error*/
                          if((rxStatus & (MIDI2_UART_RX_STS_BREAK | MIDI2_UART_RX_STS_PAR_ERROR |
                                          MIDI2_UART_RX_STS_STOP_ERROR | MIDI2_UART_RX_STS_OVERRUN)) != 0u)
                          {
                              rxData = 0u;
                          }
                      }
                  #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
 610   1      
 611   1              return(rxData);
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 11  

 612   1          }
 613          
 614          
 615              /*******************************************************************************
 616              * Function Name: MIDI2_UART_GetByte
 617              ********************************************************************************
 618              *
 619              * Summary:
 620              *  Reads UART RX buffer immediately, returns received character and error
 621              *  condition.
 622              *
 623              * Parameters:
 624              *  None.
 625              *
 626              * Return:
 627              *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628              *  an error has occurred.
 629              *
 630              * Reentrant:
 631              *  No.
 632              *
 633              *******************************************************************************/
 634              uint16 MIDI2_UART_GetByte(void) 
 635              {
 636   1              
 637   1          #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 638   1              uint16 locErrorStatus;
 639   1              /* Protect variables that could change on interrupt */
 640   1              MIDI2_UART_DisableRxInt();
 641   1              locErrorStatus = (uint16)MIDI2_UART_errorStatus;
 642   1              MIDI2_UART_errorStatus = 0u;
 643   1              MIDI2_UART_EnableRxInt();
 644   1              return ( (uint16)(locErrorStatus << 8u) | MIDI2_UART_ReadRxData() );
 645   1          #else
                      return ( ((uint16)MIDI2_UART_ReadRxStatus() << 8u) | MIDI2_UART_ReadRxData() );
                  #endif /* MIDI2_UART_RX_INTERRUPT_ENABLED */
 648   1              
 649   1          }
 650          
 651          
 652              /*******************************************************************************
 653              * Function Name: MIDI2_UART_GetRxBufferSize
 654              ********************************************************************************
 655              *
 656              * Summary:
 657              *  Returns the number of received bytes available in the RX buffer.
 658              *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659              *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660              *  * RX software buffer is enabled: returns the number of bytes available in 
 661              *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662              *    account.
 663              *
 664              * Parameters:
 665              *  None.
 666              *
 667              * Return:
 668              *  uint8: Number of bytes in the RX buffer. 
 669              *    Return value type depends on RX Buffer Size parameter.
 670              *
 671              * Global Variables:
 672              *  MIDI2_UART_rxBufferWrite - used to calculate left bytes.
 673              *  MIDI2_UART_rxBufferRead - used to calculate left bytes.
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 12  

 674              *  MIDI2_UART_rxBufferLoopDetect - checked to decide left bytes amount.
 675              *
 676              * Reentrant:
 677              *  No.
 678              *
 679              * Theory:
 680              *  Allows the user to find out how full the RX Buffer is.
 681              *
 682              *******************************************************************************/
 683              uint8 MIDI2_UART_GetRxBufferSize(void)
 684                                                                      CYREENTRANT
 685              {
 686   1              uint8 size;
 687   1      
 688   1          #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 689   1      
 690   1              /* Protect variables that could change on interrupt */
 691   1              MIDI2_UART_DisableRxInt();
 692   1      
 693   1              if(MIDI2_UART_rxBufferRead == MIDI2_UART_rxBufferWrite)
 694   1              {
 695   2                  if(MIDI2_UART_rxBufferLoopDetect != 0u)
 696   2                  {
 697   3                      size = MIDI2_UART_RX_BUFFER_SIZE;
 698   3                  }
 699   2                  else
 700   2                  {
 701   3                      size = 0u;
 702   3                  }
 703   2              }
 704   1              else if(MIDI2_UART_rxBufferRead < MIDI2_UART_rxBufferWrite)
 705   1              {
 706   2                  size = (MIDI2_UART_rxBufferWrite - MIDI2_UART_rxBufferRead);
 707   2              }
 708   1              else
 709   1              {
 710   2                  size = (MIDI2_UART_RX_BUFFER_SIZE - MIDI2_UART_rxBufferRead) + MIDI2_UART_rxBufferWrite;
 711   2              }
 712   1      
 713   1              MIDI2_UART_EnableRxInt();
 714   1      
 715   1          #else
              
                      /* We can only know if there is data in the fifo. */
                      size = ((MIDI2_UART_RXSTATUS_REG & MIDI2_UART_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
              
                  #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
 721   1      
 722   1              return(size);
 723   1          }
 724          
 725          
 726              /*******************************************************************************
 727              * Function Name: MIDI2_UART_ClearRxBuffer
 728              ********************************************************************************
 729              *
 730              * Summary:
 731              *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732              *
 733              * Parameters:
 734              *  None.
 735              *
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 13  

 736              * Return:
 737              *  None.
 738              *
 739              * Global Variables:
 740              *  MIDI2_UART_rxBufferWrite - cleared to zero.
 741              *  MIDI2_UART_rxBufferRead - cleared to zero.
 742              *  MIDI2_UART_rxBufferLoopDetect - cleared to zero.
 743              *  MIDI2_UART_rxBufferOverflow - cleared to zero.
 744              *
 745              * Reentrant:
 746              *  No.
 747              *
 748              * Theory:
 749              *  Setting the pointers to zero makes the system believe there is no data to
 750              *  read and writing will resume at address 0 overwriting any data that may
 751              *  have remained in the RAM.
 752              *
 753              * Side Effects:
 754              *  Any received data not read from the RAM or FIFO buffer will be lost.
 755              *
 756              *******************************************************************************/
 757              void MIDI2_UART_ClearRxBuffer(void) 
 758              {
 759   1              uint8 enableInterrupts;
 760   1      
 761   1              /* Clear the HW FIFO */
 762   1              enableInterrupts = CyEnterCriticalSection();
 763   1              MIDI2_UART_RXDATA_AUX_CTL_REG |= (uint8)  MIDI2_UART_RX_FIFO_CLR;
 764   1              MIDI2_UART_RXDATA_AUX_CTL_REG &= (uint8) ~MIDI2_UART_RX_FIFO_CLR;
 765   1              CyExitCriticalSection(enableInterrupts);
 766   1      
 767   1          #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
 768   1      
 769   1              /* Protect variables that could change on interrupt. */
 770   1              MIDI2_UART_DisableRxInt();
 771   1      
 772   1              MIDI2_UART_rxBufferRead = 0u;
 773   1              MIDI2_UART_rxBufferWrite = 0u;
 774   1              MIDI2_UART_rxBufferLoopDetect = 0u;
 775   1              MIDI2_UART_rxBufferOverflow = 0u;
 776   1      
 777   1              MIDI2_UART_EnableRxInt();
 778   1      
 779   1          #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
 780   1      
 781   1          }
 782          
 783          
 784              /*******************************************************************************
 785              * Function Name: MIDI2_UART_SetRxAddressMode
 786              ********************************************************************************
 787              *
 788              * Summary:
 789              *  Sets the software controlled Addressing mode used by the RX portion of the
 790              *  UART.
 791              *
 792              * Parameters:
 793              *  addressMode: Enumerated value indicating the mode of RX addressing
 794              *  MIDI2_UART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795              *                                               detection
 796              *  MIDI2_UART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797              *                                               address detection
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 14  

 798              *  MIDI2_UART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799              *                                               detection
 800              *  MIDI2_UART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801              *                                               address detection
 802              *  MIDI2_UART__B_UART__AM_NONE - No address detection
 803              *
 804              * Return:
 805              *  None.
 806              *
 807              * Global Variables:
 808              *  MIDI2_UART_rxAddressMode - the parameter stored in this variable for
 809              *   the farther usage in RX ISR.
 810              *  MIDI2_UART_rxAddressDetected - set to initial state (0).
 811              *
 812              *******************************************************************************/
 813              void MIDI2_UART_SetRxAddressMode(uint8 addressMode)
 814                                                                  
 815              {
 816   1              #if(MIDI2_UART_RXHW_ADDRESS_ENABLED)
                          #if(MIDI2_UART_CONTROL_REG_REMOVED)
                              if(0u != addressMode)
                              {
                                  /* Suppress compiler warning */
                              }
                          #else /* MIDI2_UART_CONTROL_REG_REMOVED */
                              uint8 tmpCtrl;
                              tmpCtrl = MIDI2_UART_CONTROL_REG & (uint8)~MIDI2_UART_CTRL_RXADDR_MODE_MASK;
                              tmpCtrl |= (uint8)(addressMode << MIDI2_UART_CTRL_RXADDR_MODE0_SHIFT);
                              MIDI2_UART_CONTROL_REG = tmpCtrl;
              
                              #if(MIDI2_UART_RX_INTERRUPT_ENABLED && \
                                 (MIDI2_UART_RXBUFFERSIZE > MIDI2_UART_FIFO_LENGTH) )
                                  MIDI2_UART_rxAddressMode = addressMode;
                                  MIDI2_UART_rxAddressDetected = 0u;
                              #endif /* End MIDI2_UART_RXBUFFERSIZE > MIDI2_UART_FIFO_LENGTH*/
                          #endif /* End MIDI2_UART_CONTROL_REG_REMOVED */
                      #else /* MIDI2_UART_RXHW_ADDRESS_ENABLED */
 835   1                  if(0u != addressMode)
 836   1                  {
 837   2                      /* Suppress compiler warning */
 838   2                  }
 839   1              #endif /* End MIDI2_UART_RXHW_ADDRESS_ENABLED */
 840   1          }
 841          
 842          
 843              /*******************************************************************************
 844              * Function Name: MIDI2_UART_SetRxAddress1
 845              ********************************************************************************
 846              *
 847              * Summary:
 848              *  Sets the first of two hardware-detectable receiver addresses.
 849              *
 850              * Parameters:
 851              *  address: Address #1 for hardware address detection.
 852              *
 853              * Return:
 854              *  None.
 855              *
 856              *******************************************************************************/
 857              void MIDI2_UART_SetRxAddress1(uint8 address) 
 858              {
 859   1              MIDI2_UART_RXADDRESS1_REG = address;
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 15  

 860   1          }
 861          
 862          
 863              /*******************************************************************************
 864              * Function Name: MIDI2_UART_SetRxAddress2
 865              ********************************************************************************
 866              *
 867              * Summary:
 868              *  Sets the second of two hardware-detectable receiver addresses.
 869              *
 870              * Parameters:
 871              *  address: Address #2 for hardware address detection.
 872              *
 873              * Return:
 874              *  None.
 875              *
 876              *******************************************************************************/
 877              void MIDI2_UART_SetRxAddress2(uint8 address) 
 878              {
 879   1              MIDI2_UART_RXADDRESS2_REG = address;
 880   1          }
 881          
 882          #endif  /* MIDI2_UART_RX_ENABLED || MIDI2_UART_HD_ENABLED*/
 883          
 884          
 885          #if( (MIDI2_UART_TX_ENABLED) || (MIDI2_UART_HD_ENABLED) )
 886              /*******************************************************************************
 887              * Function Name: MIDI2_UART_SetTxInterruptMode
 888              ********************************************************************************
 889              *
 890              * Summary:
 891              *  Configures the TX interrupt sources to be enabled, but does not enable the
 892              *  interrupt.
 893              *
 894              * Parameters:
 895              *  intSrc: Bit field containing the TX interrupt sources to enable
 896              *   MIDI2_UART_TX_STS_COMPLETE        Interrupt on TX byte complete
 897              *   MIDI2_UART_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898              *   MIDI2_UART_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899              *   MIDI2_UART_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900              *
 901              * Return:
 902              *  None.
 903              *
 904              * Theory:
 905              *  Enables the output of specific status bits to the interrupt controller
 906              *
 907              *******************************************************************************/
 908              void MIDI2_UART_SetTxInterruptMode(uint8 intSrc) 
 909              {
 910   1              MIDI2_UART_TXSTATUS_MASK_REG = intSrc;
 911   1          }
 912          
 913          
 914              /*******************************************************************************
 915              * Function Name: MIDI2_UART_WriteTxData
 916              ********************************************************************************
 917              *
 918              * Summary:
 919              *  Places a byte of data into the transmit buffer to be sent when the bus is
 920              *  available without checking the TX status register. You must check status
 921              *  separately.
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 16  

 922              *
 923              * Parameters:
 924              *  txDataByte: data byte
 925              *
 926              * Return:
 927              * None.
 928              *
 929              * Global Variables:
 930              *  MIDI2_UART_txBuffer - RAM buffer pointer for save data for transmission
 931              *  MIDI2_UART_txBufferWrite - cyclic index for write to txBuffer,
 932              *    incremented after each byte saved to buffer.
 933              *  MIDI2_UART_txBufferRead - cyclic index for read from txBuffer,
 934              *    checked to identify the condition to write to FIFO directly or to TX buffer
 935              *  MIDI2_UART_initVar - checked to identify that the component has been
 936              *    initialized.
 937              *
 938              * Reentrant:
 939              *  No.
 940              *
 941              *******************************************************************************/
 942              void MIDI2_UART_WriteTxData(uint8 txDataByte) 
 943              {
 944   1              /* If not Initialized then skip this function*/
 945   1              if(MIDI2_UART_initVar != 0u)
 946   1              {
 947   2              #if (MIDI2_UART_TX_INTERRUPT_ENABLED)
 948   2      
 949   2                  /* Protect variables that could change on interrupt. */
 950   2                  MIDI2_UART_DisableTxInt();
 951   2      
 952   2                  if( (MIDI2_UART_txBufferRead == MIDI2_UART_txBufferWrite) &&
 953   2                      ((MIDI2_UART_TXSTATUS_REG & MIDI2_UART_TX_STS_FIFO_FULL) == 0u) )
 954   2                  {
 955   3                      /* Add directly to the FIFO. */
 956   3                      MIDI2_UART_TXDATA_REG = txDataByte;
 957   3                  }
 958   2                  else
 959   2                  {
 960   3                      if(MIDI2_UART_txBufferWrite >= MIDI2_UART_TX_BUFFER_SIZE)
 961   3                      {
 962   4                          MIDI2_UART_txBufferWrite = 0u;
 963   4                      }
 964   3      
 965   3                      MIDI2_UART_txBuffer[MIDI2_UART_txBufferWrite] = txDataByte;
 966   3      
 967   3                      /* Add to the software buffer. */
 968   3                      MIDI2_UART_txBufferWrite++;
 969   3                  }
 970   2      
 971   2                  MIDI2_UART_EnableTxInt();
 972   2      
 973   2              #else
              
                          /* Add directly to the FIFO. */
                          MIDI2_UART_TXDATA_REG = txDataByte;
              
                      #endif /*(MIDI2_UART_TX_INTERRUPT_ENABLED) */
 979   2              }
 980   1          }
 981          
 982          
 983              /*******************************************************************************
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 17  

 984              * Function Name: MIDI2_UART_ReadTxStatus
 985              ********************************************************************************
 986              *
 987              * Summary:
 988              *  Reads the status register for the TX portion of the UART.
 989              *
 990              * Parameters:
 991              *  None.
 992              *
 993              * Return:
 994              *  Contents of the status register
 995              *
 996              * Theory:
 997              *  This function reads the TX status register, which is cleared on read.
 998              *  It is up to the user to handle all bits in this return value accordingly,
 999              *  even if the bit was not enabled as an interrupt source the event happened
1000              *  and must be handled accordingly.
1001              *
1002              *******************************************************************************/
1003              uint8 MIDI2_UART_ReadTxStatus(void) 
1004              {
1005   1              return(MIDI2_UART_TXSTATUS_REG);
1006   1          }
1007          
1008          
1009              /*******************************************************************************
1010              * Function Name: MIDI2_UART_PutChar
1011              ********************************************************************************
1012              *
1013              * Summary:
1014              *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015              *  available. This is a blocking API that waits until the TX buffer has room to
1016              *  hold the data.
1017              *
1018              * Parameters:
1019              *  txDataByte: Byte containing the data to transmit
1020              *
1021              * Return:
1022              *  None.
1023              *
1024              * Global Variables:
1025              *  MIDI2_UART_txBuffer - RAM buffer pointer for save data for transmission
1026              *  MIDI2_UART_txBufferWrite - cyclic index for write to txBuffer,
1027              *     checked to identify free space in txBuffer and incremented after each byte
1028              *     saved to buffer.
1029              *  MIDI2_UART_txBufferRead - cyclic index for read from txBuffer,
1030              *     checked to identify free space in txBuffer.
1031              *  MIDI2_UART_initVar - checked to identify that the component has been
1032              *     initialized.
1033              *
1034              * Reentrant:
1035              *  No.
1036              *
1037              * Theory:
1038              *  Allows the user to transmit any byte of data in a single transfer
1039              *
1040              *******************************************************************************/
1041              void MIDI2_UART_PutChar(uint8 txDataByte) CYREENTRANT
1042              {
1043   1          #if (MIDI2_UART_TX_INTERRUPT_ENABLED)
1044   1              /* The temporary output pointer is used since it takes two instructions
1045   1              *  to increment with a wrap, and we can't risk doing that with the real
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 18  

1046   1              *  pointer and getting an interrupt in between instructions.
1047   1              */
1048   1              uint8 locTxBufferWrite;
1049   1              uint8 locTxBufferRead;
1050   1      
1051   1              do
1052   1              { /* Block if software buffer is full, so we don't overwrite. */
1053   2      
1054   2              #if ((MIDI2_UART_TX_BUFFER_SIZE > MIDI2_UART_MAX_BYTE_VALUE) && (CY_PSOC3))
                          /* Disable TX interrupt to protect variables from modification */
                          MIDI2_UART_DisableTxInt();
                      #endif /* (MIDI2_UART_TX_BUFFER_SIZE > MIDI2_UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058   2      
1059   2                  locTxBufferWrite = MIDI2_UART_txBufferWrite;
1060   2                  locTxBufferRead  = MIDI2_UART_txBufferRead;
1061   2      
1062   2              #if ((MIDI2_UART_TX_BUFFER_SIZE > MIDI2_UART_MAX_BYTE_VALUE) && (CY_PSOC3))
                          /* Enable interrupt to continue transmission */
                          MIDI2_UART_EnableTxInt();
                      #endif /* (MIDI2_UART_TX_BUFFER_SIZE > MIDI2_UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066   2              }
1067   1              while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) :
1068   1                                      ((locTxBufferWrite - locTxBufferRead) ==
1069   1                                      (uint8)(MIDI2_UART_TX_BUFFER_SIZE - 1u)) );
1070   1      
1071   1              if( (locTxBufferRead == locTxBufferWrite) &&
1072   1                  ((MIDI2_UART_TXSTATUS_REG & MIDI2_UART_TX_STS_FIFO_FULL) == 0u) )
1073   1              {
1074   2                  /* Add directly to the FIFO */
1075   2                  MIDI2_UART_TXDATA_REG = txDataByte;
1076   2              }
1077   1              else
1078   1              {
1079   2                  if(locTxBufferWrite >= MIDI2_UART_TX_BUFFER_SIZE)
1080   2                  {
1081   3                      locTxBufferWrite = 0u;
1082   3                  }
1083   2                  /* Add to the software buffer. */
1084   2                  MIDI2_UART_txBuffer[locTxBufferWrite] = txDataByte;
1085   2                  locTxBufferWrite++;
1086   2      
1087   2                  /* Finally, update the real output pointer */
1088   2              #if ((MIDI2_UART_TX_BUFFER_SIZE > MIDI2_UART_MAX_BYTE_VALUE) && (CY_PSOC3))
                          MIDI2_UART_DisableTxInt();
                      #endif /* (MIDI2_UART_TX_BUFFER_SIZE > MIDI2_UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091   2      
1092   2                  MIDI2_UART_txBufferWrite = locTxBufferWrite;
1093   2      
1094   2              #if ((MIDI2_UART_TX_BUFFER_SIZE > MIDI2_UART_MAX_BYTE_VALUE) && (CY_PSOC3))
                          MIDI2_UART_EnableTxInt();
                      #endif /* (MIDI2_UART_TX_BUFFER_SIZE > MIDI2_UART_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097   2      
1098   2                  if(0u != (MIDI2_UART_TXSTATUS_REG & MIDI2_UART_TX_STS_FIFO_EMPTY))
1099   2                  {
1100   3                      /* Trigger TX interrupt to send software buffer */
1101   3                      MIDI2_UART_SetPendingTxInt();
1102   3                  }
1103   2              }
1104   1      
1105   1          #else
              
                      while((MIDI2_UART_TXSTATUS_REG & MIDI2_UART_TX_STS_FIFO_FULL) != 0u)
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 19  

                      {
                          /* Wait for room in the FIFO */
                      }
              
                      /* Add directly to the FIFO */
                      MIDI2_UART_TXDATA_REG = txDataByte;
              
                  #endif /* MIDI2_UART_TX_INTERRUPT_ENABLED */
1116   1          }
1117          
1118          
1119              /*******************************************************************************
1120              * Function Name: MIDI2_UART_PutString
1121              ********************************************************************************
1122              *
1123              * Summary:
1124              *  Sends a NULL terminated string to the TX buffer for transmission.
1125              *
1126              * Parameters:
1127              *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128              *
1129              * Return:
1130              *  None.
1131              *
1132              * Global Variables:
1133              *  MIDI2_UART_initVar - checked to identify that the component has been
1134              *     initialized.
1135              *
1136              * Reentrant:
1137              *  No.
1138              *
1139              * Theory:
1140              *  If there is not enough memory in the TX buffer for the entire string, this
1141              *  function blocks until the last character of the string is loaded into the
1142              *  TX buffer.
1143              *
1144              *******************************************************************************/
1145              void MIDI2_UART_PutString(const char8 string[]) 
1146              {
1147   1              uint16 bufIndex = 0u;
1148   1      
1149   1              /* If not Initialized then skip this function */
1150   1              if(MIDI2_UART_initVar != 0u)
1151   1              {
1152   2                  /* This is a blocking function, it will not exit until all data is sent */
1153   2                  while(string[bufIndex] != (char8) 0)
1154   2                  {
1155   3                      MIDI2_UART_PutChar((uint8)string[bufIndex]);
1156   3                      bufIndex++;
1157   3                  }
1158   2              }
1159   1          }
1160          
1161          
1162              /*******************************************************************************
1163              * Function Name: MIDI2_UART_PutArray
1164              ********************************************************************************
1165              *
1166              * Summary:
1167              *  Places N bytes of data from a memory array into the TX buffer for
1168              *  transmission.
1169              *
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 20  

1170              * Parameters:
1171              *  string[]: Address of the memory array residing in RAM or ROM.
1172              *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173              *             Size parameter.
1174              *
1175              * Return:
1176              *  None.
1177              *
1178              * Global Variables:
1179              *  MIDI2_UART_initVar - checked to identify that the component has been
1180              *     initialized.
1181              *
1182              * Reentrant:
1183              *  No.
1184              *
1185              * Theory:
1186              *  If there is not enough memory in the TX buffer for the entire string, this
1187              *  function blocks until the last character of the string is loaded into the
1188              *  TX buffer.
1189              *
1190              *******************************************************************************/
1191              void MIDI2_UART_PutArray(const uint8 string[], uint8 byteCount)
1192                                                                              
1193              {
1194   1              uint8 bufIndex = 0u;
1195   1      
1196   1              /* If not Initialized then skip this function */
1197   1              if(MIDI2_UART_initVar != 0u)
1198   1              {
1199   2                  while(bufIndex < byteCount)
1200   2                  {
1201   3                      MIDI2_UART_PutChar(string[bufIndex]);
1202   3                      bufIndex++;
1203   3                  }
1204   2              }
1205   1          }
1206          
1207          
1208              /*******************************************************************************
1209              * Function Name: MIDI2_UART_PutCRLF
1210              ********************************************************************************
1211              *
1212              * Summary:
1213              *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214              *  (0x0A) to the transmit buffer.
1215              *
1216              * Parameters:
1217              *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218              *
1219              * Return:
1220              *  None.
1221              *
1222              * Global Variables:
1223              *  MIDI2_UART_initVar - checked to identify that the component has been
1224              *     initialized.
1225              *
1226              * Reentrant:
1227              *  No.
1228              *
1229              *******************************************************************************/
1230              void MIDI2_UART_PutCRLF(uint8 txDataByte) 
1231              {
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 21  

1232   1              /* If not Initialized then skip this function */
1233   1              if(MIDI2_UART_initVar != 0u)
1234   1              {
1235   2                  MIDI2_UART_PutChar(txDataByte);
1236   2                  MIDI2_UART_PutChar(0x0Du);
1237   2                  MIDI2_UART_PutChar(0x0Au);
1238   2              }
1239   1          }
1240          
1241          
1242              /*******************************************************************************
1243              * Function Name: MIDI2_UART_GetTxBufferSize
1244              ********************************************************************************
1245              *
1246              * Summary:
1247              *  Returns the number of bytes in the TX buffer which are waiting to be 
1248              *  transmitted.
1249              *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250              *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251              *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252              *    software buffer which are waiting to be transmitted. Bytes available in the
1253              *    TX FIFO do not count.
1254              *
1255              * Parameters:
1256              *  None.
1257              *
1258              * Return:
1259              *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260              *  Buffer Size parameter.
1261              *
1262              * Global Variables:
1263              *  MIDI2_UART_txBufferWrite - used to calculate left space.
1264              *  MIDI2_UART_txBufferRead - used to calculate left space.
1265              *
1266              * Reentrant:
1267              *  No.
1268              *
1269              * Theory:
1270              *  Allows the user to find out how full the TX Buffer is.
1271              *
1272              *******************************************************************************/
1273              uint8 MIDI2_UART_GetTxBufferSize(void)
1274                                                                      
1275              {
1276   1              uint8 size;
1277   1      
1278   1          #if (MIDI2_UART_TX_INTERRUPT_ENABLED)
1279   1      
1280   1              /* Protect variables that could change on interrupt. */
1281   1              MIDI2_UART_DisableTxInt();
1282   1      
1283   1              if(MIDI2_UART_txBufferRead == MIDI2_UART_txBufferWrite)
1284   1              {
1285   2                  size = 0u;
1286   2              }
1287   1              else if(MIDI2_UART_txBufferRead < MIDI2_UART_txBufferWrite)
1288   1              {
1289   2                  size = (MIDI2_UART_txBufferWrite - MIDI2_UART_txBufferRead);
1290   2              }
1291   1              else
1292   1              {
1293   2                  size = (MIDI2_UART_TX_BUFFER_SIZE - MIDI2_UART_txBufferRead) +
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 22  

1294   2                          MIDI2_UART_txBufferWrite;
1295   2              }
1296   1      
1297   1              MIDI2_UART_EnableTxInt();
1298   1      
1299   1          #else
              
                      size = MIDI2_UART_TXSTATUS_REG;
              
                      /* Is the fifo is full. */
                      if((size & MIDI2_UART_TX_STS_FIFO_FULL) != 0u)
                      {
                          size = MIDI2_UART_FIFO_LENGTH;
                      }
                      else if((size & MIDI2_UART_TX_STS_FIFO_EMPTY) != 0u)
                      {
                          size = 0u;
                      }
                      else
                      {
                          /* We only know there is data in the fifo. */
                          size = 1u;
                      }
              
                  #endif /* (MIDI2_UART_TX_INTERRUPT_ENABLED) */
1319   1      
1320   1          return(size);
1321   1          }
1322          
1323          
1324              /*******************************************************************************
1325              * Function Name: MIDI2_UART_ClearTxBuffer
1326              ********************************************************************************
1327              *
1328              * Summary:
1329              *  Clears all data from the TX buffer and hardware TX FIFO.
1330              *
1331              * Parameters:
1332              *  None.
1333              *
1334              * Return:
1335              *  None.
1336              *
1337              * Global Variables:
1338              *  MIDI2_UART_txBufferWrite - cleared to zero.
1339              *  MIDI2_UART_txBufferRead - cleared to zero.
1340              *
1341              * Reentrant:
1342              *  No.
1343              *
1344              * Theory:
1345              *  Setting the pointers to zero makes the system believe there is no data to
1346              *  read and writing will resume at address 0 overwriting any data that may have
1347              *  remained in the RAM.
1348              *
1349              * Side Effects:
1350              *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351              *  transmitting finishes transmitting.
1352              *
1353              *******************************************************************************/
1354              void MIDI2_UART_ClearTxBuffer(void) 
1355              {
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 23  

1356   1              uint8 enableInterrupts;
1357   1      
1358   1              enableInterrupts = CyEnterCriticalSection();
1359   1              /* Clear the HW FIFO */
1360   1              MIDI2_UART_TXDATA_AUX_CTL_REG |= (uint8)  MIDI2_UART_TX_FIFO_CLR;
1361   1              MIDI2_UART_TXDATA_AUX_CTL_REG &= (uint8) ~MIDI2_UART_TX_FIFO_CLR;
1362   1              CyExitCriticalSection(enableInterrupts);
1363   1      
1364   1          #if (MIDI2_UART_TX_INTERRUPT_ENABLED)
1365   1      
1366   1              /* Protect variables that could change on interrupt. */
1367   1              MIDI2_UART_DisableTxInt();
1368   1      
1369   1              MIDI2_UART_txBufferRead = 0u;
1370   1              MIDI2_UART_txBufferWrite = 0u;
1371   1      
1372   1              /* Enable Tx interrupt. */
1373   1              MIDI2_UART_EnableTxInt();
1374   1      
1375   1          #endif /* (MIDI2_UART_TX_INTERRUPT_ENABLED) */
1376   1          }
1377          
1378          
1379              /*******************************************************************************
1380              * Function Name: MIDI2_UART_SendBreak
1381              ********************************************************************************
1382              *
1383              * Summary:
1384              *  Transmits a break signal on the bus.
1385              *
1386              * Parameters:
1387              *  uint8 retMode:  Send Break return mode. See the following table for options.
1388              *   MIDI2_UART_SEND_BREAK - Initialize registers for break, send the Break
1389              *       signal and return immediately.
1390              *   MIDI2_UART_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391              *       complete, reinitialize registers to normal transmission mode then return
1392              *   MIDI2_UART_REINIT - Reinitialize registers to normal transmission mode
1393              *       then return.
1394              *   MIDI2_UART_SEND_WAIT_REINIT - Performs both options: 
1395              *      MIDI2_UART_SEND_BREAK and MIDI2_UART_WAIT_FOR_COMPLETE_REINIT.
1396              *      This option is recommended for most cases.
1397              *
1398              * Return:
1399              *  None.
1400              *
1401              * Global Variables:
1402              *  MIDI2_UART_initVar - checked to identify that the component has been
1403              *     initialized.
1404              *  txPeriod - static variable, used for keeping TX period configuration.
1405              *
1406              * Reentrant:
1407              *  No.
1408              *
1409              * Theory:
1410              *  SendBreak function initializes registers to send 13-bit break signal. It is
1411              *  important to return the registers configuration to normal for continue 8-bit
1412              *  operation.
1413              *  There are 3 variants for this API usage:
1414              *  1) SendBreak(3) - function will send the Break signal and take care on the
1415              *     configuration returning. Function will block CPU until transmission
1416              *     complete.
1417              *  2) User may want to use blocking time if UART configured to the low speed
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 24  

1418              *     operation
1419              *     Example for this case:
1420              *     SendBreak(0);     - initialize Break signal transmission
1421              *         Add your code here to use CPU time
1422              *     SendBreak(1);     - complete Break operation
1423              *  3) Same to 2) but user may want to initialize and use the interrupt to
1424              *     complete break operation.
1425              *     Example for this case:
1426              *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427              *     SendBreak(0);     - initialize Break signal transmission
1428              *         Add your code here to use CPU time
1429              *     When interrupt appear with MIDI2_UART_TX_STS_COMPLETE status:
1430              *     SendBreak(2);     - complete Break operation
1431              *
1432              * Side Effects:
1433              *  The MIDI2_UART_SendBreak() function initializes registers to send a
1434              *  break signal.
1435              *  Break signal length depends on the break signal bits configuration.
1436              *  The register configuration should be reinitialized before normal 8-bit
1437              *  communication can continue.
1438              *
1439              *******************************************************************************/
1440              void MIDI2_UART_SendBreak(uint8 retMode) 
1441              {
1442   1      
1443   1              /* If not Initialized then skip this function*/
1444   1              if(MIDI2_UART_initVar != 0u)
1445   1              {
1446   2                  /* Set the Counter to 13-bits and transmit a 00 byte */
1447   2                  /* When that is done then reset the counter value back */
1448   2                  uint8 tmpStat;
1449   2      
1450   2              #if(MIDI2_UART_HD_ENABLED) /* Half Duplex mode*/
              
                          if( (retMode == MIDI2_UART_SEND_BREAK) ||
                              (retMode == MIDI2_UART_SEND_WAIT_REINIT ) )
                          {
                              /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
                              MIDI2_UART_WriteControlRegister(MIDI2_UART_ReadControlRegister() |
                                                                    MIDI2_UART_CTRL_HD_SEND_BREAK);
                              /* Send zeros */
                              MIDI2_UART_TXDATA_REG = 0u;
              
                              do /* Wait until transmit starts */
                              {
                                  tmpStat = MIDI2_UART_TXSTATUS_REG;
                              }
                              while((tmpStat & MIDI2_UART_TX_STS_FIFO_EMPTY) != 0u);
                          }
              
                          if( (retMode == MIDI2_UART_WAIT_FOR_COMPLETE_REINIT) ||
                              (retMode == MIDI2_UART_SEND_WAIT_REINIT) )
                          {
                              do /* Wait until transmit complete */
                              {
                                  tmpStat = MIDI2_UART_TXSTATUS_REG;
                              }
                              while(((uint8)~tmpStat & MIDI2_UART_TX_STS_COMPLETE) != 0u);
                          }
              
                          if( (retMode == MIDI2_UART_WAIT_FOR_COMPLETE_REINIT) ||
                              (retMode == MIDI2_UART_REINIT) ||
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 25  

                              (retMode == MIDI2_UART_SEND_WAIT_REINIT) )
                          {
                              MIDI2_UART_WriteControlRegister(MIDI2_UART_ReadControlRegister() &
                                                            (uint8)~MIDI2_UART_CTRL_HD_SEND_BREAK);
                          }
              
                      #else /* MIDI2_UART_HD_ENABLED Full Duplex mode */
1487   2      
1488   2                  static uint8 txPeriod;
1489   2      
1490   2                  if( (retMode == MIDI2_UART_SEND_BREAK) ||
1491   2                      (retMode == MIDI2_UART_SEND_WAIT_REINIT) )
1492   2                  {
1493   3                      /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode */
1494   3                      #if( (MIDI2_UART_PARITY_TYPE != MIDI2_UART__B_UART__NONE_REVB) || \
1495   3                                          (MIDI2_UART_PARITY_TYPE_SW != 0u) )
                                  MIDI2_UART_WriteControlRegister(MIDI2_UART_ReadControlRegister() |
                                                                        MIDI2_UART_CTRL_HD_SEND_BREAK);
                              #endif /* End MIDI2_UART_PARITY_TYPE != MIDI2_UART__B_UART__NONE_REVB  */
1499   3      
1500   3                      #if(MIDI2_UART_TXCLKGEN_DP)
1501   3                          txPeriod = MIDI2_UART_TXBITCLKTX_COMPLETE_REG;
1502   3                          MIDI2_UART_TXBITCLKTX_COMPLETE_REG = MIDI2_UART_TXBITCTR_BREAKBITS;
1503   3                      #else
                                  txPeriod = MIDI2_UART_TXBITCTR_PERIOD_REG;
                                  MIDI2_UART_TXBITCTR_PERIOD_REG = MIDI2_UART_TXBITCTR_BREAKBITS8X;
                              #endif /* End MIDI2_UART_TXCLKGEN_DP */
1507   3      
1508   3                      /* Send zeros */
1509   3                      MIDI2_UART_TXDATA_REG = 0u;
1510   3      
1511   3                      do /* Wait until transmit starts */
1512   3                      {
1513   4                          tmpStat = MIDI2_UART_TXSTATUS_REG;
1514   4                      }
1515   3                      while((tmpStat & MIDI2_UART_TX_STS_FIFO_EMPTY) != 0u);
1516   3                  }
1517   2      
1518   2                  if( (retMode == MIDI2_UART_WAIT_FOR_COMPLETE_REINIT) ||
1519   2                      (retMode == MIDI2_UART_SEND_WAIT_REINIT) )
1520   2                  {
1521   3                      do /* Wait until transmit complete */
1522   3                      {
1523   4                          tmpStat = MIDI2_UART_TXSTATUS_REG;
1524   4                      }
1525   3                      while(((uint8)~tmpStat & MIDI2_UART_TX_STS_COMPLETE) != 0u);
1526   3                  }
1527   2      
1528   2                  if( (retMode == MIDI2_UART_WAIT_FOR_COMPLETE_REINIT) ||
1529   2                      (retMode == MIDI2_UART_REINIT) ||
1530   2                      (retMode == MIDI2_UART_SEND_WAIT_REINIT) )
1531   2                  {
1532   3      
1533   3                  #if(MIDI2_UART_TXCLKGEN_DP)
1534   3                      MIDI2_UART_TXBITCLKTX_COMPLETE_REG = txPeriod;
1535   3                  #else
                              MIDI2_UART_TXBITCTR_PERIOD_REG = txPeriod;
                          #endif /* End MIDI2_UART_TXCLKGEN_DP */
1538   3      
1539   3                  #if( (MIDI2_UART_PARITY_TYPE != MIDI2_UART__B_UART__NONE_REVB) || \
1540   3                       (MIDI2_UART_PARITY_TYPE_SW != 0u) )
                              MIDI2_UART_WriteControlRegister(MIDI2_UART_ReadControlRegister() &
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 26  

                                                                    (uint8) ~MIDI2_UART_CTRL_HD_SEND_BREAK);
                          #endif /* End MIDI2_UART_PARITY_TYPE != NONE */
1544   3                  }
1545   2              #endif    /* End MIDI2_UART_HD_ENABLED */
1546   2              }
1547   1          }
1548          
1549          
1550              /*******************************************************************************
1551              * Function Name: MIDI2_UART_SetTxAddressMode
1552              ********************************************************************************
1553              *
1554              * Summary:
1555              *  Configures the transmitter to signal the next bytes is address or data.
1556              *
1557              * Parameters:
1558              *  addressMode: 
1559              *       MIDI2_UART_SET_SPACE - Configure the transmitter to send the next
1560              *                                    byte as a data.
1561              *       MIDI2_UART_SET_MARK  - Configure the transmitter to send the next
1562              *                                    byte as an address.
1563              *
1564              * Return:
1565              *  None.
1566              *
1567              * Side Effects:
1568              *  This function sets and clears MIDI2_UART_CTRL_MARK bit in the Control
1569              *  register.
1570              *
1571              *******************************************************************************/
1572              void MIDI2_UART_SetTxAddressMode(uint8 addressMode) 
1573              {
1574   1              /* Mark/Space sending enable */
1575   1              if(addressMode != 0u)
1576   1              {
1577   2              #if( MIDI2_UART_CONTROL_REG_REMOVED == 0u )
                          MIDI2_UART_WriteControlRegister(MIDI2_UART_ReadControlRegister() |
                                                                MIDI2_UART_CTRL_MARK);
                      #endif /* End MIDI2_UART_CONTROL_REG_REMOVED == 0u */
1581   2              }
1582   1              else
1583   1              {
1584   2              #if( MIDI2_UART_CONTROL_REG_REMOVED == 0u )
                          MIDI2_UART_WriteControlRegister(MIDI2_UART_ReadControlRegister() &
                                                                (uint8) ~MIDI2_UART_CTRL_MARK);
                      #endif /* End MIDI2_UART_CONTROL_REG_REMOVED == 0u */
1588   2              }
1589   1          }
1590          
1591          #endif  /* EndMIDI2_UART_TX_ENABLED */
1592          
1593          #if(MIDI2_UART_HD_ENABLED)
              
              
                  /*******************************************************************************
                  * Function Name: MIDI2_UART_LoadRxConfig
                  ********************************************************************************
                  *
                  * Summary:
                  *  Loads the receiver configuration in half duplex mode. After calling this
                  *  function, the UART is ready to receive data.
                  *
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 27  

                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Side Effects:
                  *  Valid only in half duplex mode. You must make sure that the previous
                  *  transaction is complete and it is safe to unload the transmitter
                  *  configuration.
                  *
                  *******************************************************************************/
                  void MIDI2_UART_LoadRxConfig(void) 
                  {
                      MIDI2_UART_WriteControlRegister(MIDI2_UART_ReadControlRegister() &
                                                              (uint8)~MIDI2_UART_CTRL_HD_SEND);
                      MIDI2_UART_RXBITCTR_PERIOD_REG = MIDI2_UART_HD_RXBITCTR_INIT;
              
                  #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
                      /* Enable RX interrupt after set RX configuration */
                      MIDI2_UART_SetRxInterruptMode(MIDI2_UART_INIT_RX_INTERRUPTS_MASK);
                  #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
                  }
              
              
                  /*******************************************************************************
                  * Function Name: MIDI2_UART_LoadTxConfig
                  ********************************************************************************
                  *
                  * Summary:
                  *  Loads the transmitter configuration in half duplex mode. After calling this
                  *  function, the UART is ready to transmit data.
                  *
                  * Parameters:
                  *  None.
                  *
                  * Return:
                  *  None.
                  *
                  * Side Effects:
                  *  Valid only in half duplex mode. You must make sure that the previous
                  *  transaction is complete and it is safe to unload the receiver configuration.
                  *
                  *******************************************************************************/
                  void MIDI2_UART_LoadTxConfig(void) 
                  {
                  #if (MIDI2_UART_RX_INTERRUPT_ENABLED)
                      /* Disable RX interrupts before set TX configuration */
                      MIDI2_UART_SetRxInterruptMode(0u);
                  #endif /* (MIDI2_UART_RX_INTERRUPT_ENABLED) */
              
                      MIDI2_UART_WriteControlRegister(MIDI2_UART_ReadControlRegister() | MIDI2_UART_CTRL_HD_SEND);
                      MIDI2_UART_RXBITCTR_PERIOD_REG = MIDI2_UART_HD_TXBITCTR_INIT;
                  }
              
              #endif  /* MIDI2_UART_HD_ENABLED */
1660          
1661          
1662          /* [] END OF FILE */
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 28  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION MIDI2_UART_Start (BEGIN)
                                           ; SOURCE LINE # 76
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 79
0000 900000      R     MOV     DPTR,#MIDI2_UART_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0001
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
0008 120000      R     LCALL   MIDI2_UART_Init
                                           ; SOURCE LINE # 82
000B 900000      R     MOV     DPTR,#MIDI2_UART_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 83
0011         ?C0001:
                                           ; SOURCE LINE # 85
0011 120000      R     LCALL   MIDI2_UART_Enable
                                           ; SOURCE LINE # 86
0014 22                RET     
             ; FUNCTION MIDI2_UART_Start (END)

             ; FUNCTION MIDI2_UART_Init (BEGIN)
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 112
0000 7C00        E     MOV     R4,#HIGH MIDI2_UART_RXISR
0002 7D00        E     MOV     R5,#LOW MIDI2_UART_RXISR
0004 7F03              MOV     R7,#03H
0006 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 113
0009 7D07              MOV     R5,#07H
000B 7F03              MOV     R7,#03H
000D 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 114
0010 900000      R     MOV     DPTR,#MIDI2_UART_errorStatus
0013 E4                CLR     A
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
0015 90658B            MOV     DPTR,#0658BH
0018 7471              MOV     A,#071H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 126
001B 906589            MOV     DPTR,#06589H
001E 7420              MOV     A,#020H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0021 7C00        E     MOV     R4,#HIGH MIDI2_UART_TXISR
0023 7D00        E     MOV     R5,#LOW MIDI2_UART_TXISR
0025 7F04              MOV     R7,#04H
0027 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 133
002A 7D07              MOV     R5,#07H
002C 7F04              MOV     R7,#04H
002E 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 138
0031 906529            MOV     DPTR,#06529H
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 29  

0034 7406              MOV     A,#06H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 139
0037 906539            MOV     DPTR,#06539H
003A 7447              MOV     A,#047H
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
003D 906489            MOV     DPTR,#06489H
0040 7402              MOV     A,#02H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0043 22                RET     
             ; FUNCTION MIDI2_UART_Init (END)

             ; FUNCTION MIDI2_UART_Enable (BEGIN)
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 186
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 190
0008 90659B            MOV     DPTR,#0659BH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4420              ORL     A,#020H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0013 906599            MOV     DPTR,#06599H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4410              ORL     A,#010H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
001E 9044C0            MOV     DPTR,#044C0H
0021 7408              MOV     A,#08H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0024 906499            MOV     DPTR,#06499H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 4410              ORL     A,#010H
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 213
002F 9044D8            MOV     DPTR,#044D8H
0032 7410              MOV     A,#010H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 214
0035 9044C0            MOV     DPTR,#044C0H
0038 7410              MOV     A,#010H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 222
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 30  

003B 900000      R     MOV     DPTR,#enableInterrupts
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 223
0043 22                RET     
             ; FUNCTION MIDI2_UART_Enable (END)

             ; FUNCTION MIDI2_UART_Stop (BEGIN)
                                           ; SOURCE LINE # 240
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 243
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
0008 90659B            MOV     DPTR,#0659BH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54DF              ANL     A,#0DFH
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0013 906599            MOV     DPTR,#06599H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54EF              ANL     A,#0EFH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 265
001E 9044C8            MOV     DPTR,#044C8H
0021 7408              MOV     A,#08H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
0024 906499            MOV     DPTR,#06499H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 54EF              ANL     A,#0EFH
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 273
002F 9044C8            MOV     DPTR,#044C8H
0032 7410              MOV     A,#010H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
0035 900000      R     MOV     DPTR,#enableInterrupts
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 278
003D 22                RET     
             ; FUNCTION MIDI2_UART_Stop (END)

             ; FUNCTION MIDI2_UART_ReadControlRegister (BEGIN)
                                           ; SOURCE LINE # 295
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 31  

                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 298
0000 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 302
0002         ?C0006:
0002 22                RET     
             ; FUNCTION MIDI2_UART_ReadControlRegister (END)

             ; FUNCTION _MIDI2_UART_WriteControlRegister (BEGIN)
                                           ; SOURCE LINE # 319
0000 900000      R     MOV     DPTR,#control
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 320
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 329
0005         ?C0008:
0005 22                RET     
             ; FUNCTION _MIDI2_UART_WriteControlRegister (END)

             ; FUNCTION _MIDI2_UART_SetRxInterruptMode (BEGIN)
                                           ; SOURCE LINE # 359
0000 900000      R     MOV     DPTR,#intSrc
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
                                           ; SOURCE LINE # 361
0005 900000      R     MOV     DPTR,#intSrc
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906589            MOV     DPTR,#06589H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
000F 22                RET     
             ; FUNCTION _MIDI2_UART_SetRxInterruptMode (END)

             ; FUNCTION _?MIDI2_UART_ReadRxData (BEGIN)
                                           ; SOURCE LINE # 392
0000 90FFFD            MOV     DPTR,#0FFFDH
0003 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 402
0006 9044C8            MOV     DPTR,#044C8H
0009 7408              MOV     A,#08H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
000C 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 850083      E     MOV     DPH,?C_XBP
0014 850082      E     MOV     DPL,?C_XBP+01H
0017 A3                INC     DPTR
0018 EF                MOV     A,R7
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
001A 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferWrite
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F 850083      E     MOV     DPH,?C_XBP
0022 850082      E     MOV     DPL,?C_XBP+01H
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 32  

0025 A3                INC     DPTR
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
0029 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferLoopDetect
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 7017              JNZ     ?C0011
0031 850083      E     MOV     DPH,?C_XBP
0034 850082      E     MOV     DPL,?C_XBP+01H
0037 A3                INC     DPTR
0038 A3                INC     DPTR
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B 850083      E     MOV     DPH,?C_XBP
003E 850082      E     MOV     DPL,?C_XBP+01H
0041 A3                INC     DPTR
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 EE                MOV     A,R6
0045 6F                XRL     A,R7
0046 605C              JZ      ?C0010
0048         ?C0011:
                                           ; SOURCE LINE # 408
                                           ; SOURCE LINE # 409
0048 850083      E     MOV     DPH,?C_XBP
004B 850082      E     MOV     DPL,?C_XBP+01H
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 7400        R     MOV     A,#LOW MIDI2_UART_rxBuffer
0053 2F                ADD     A,R7
0054 F582              MOV     DPL,A
0056 E4                CLR     A
0057 3400        R     ADDC    A,#HIGH MIDI2_UART_rxBuffer
0059 F583              MOV     DPH,A
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D 850083      E     MOV     DPH,?C_XBP
0060 850082      E     MOV     DPL,?C_XBP+01H
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 410
0065 850083      E     MOV     DPH,?C_XBP
0068 850082      E     MOV     DPL,?C_XBP+01H
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D 04                INC     A
006E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 412
006F 850083      E     MOV     DPH,?C_XBP
0072 850082      E     MOV     DPL,?C_XBP+01H
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 C3                CLR     C
007A 94FF              SUBB    A,#0FFH
007C 4009              JC      ?C0012
                                           ; SOURCE LINE # 413
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 33  

                                           ; SOURCE LINE # 414
007E 850083      E     MOV     DPH,?C_XBP
0081 850082      E     MOV     DPL,?C_XBP+01H
0084 A3                INC     DPTR
0085 E4                CLR     A
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
0087         ?C0012:
                                           ; SOURCE LINE # 417
0087 850083      E     MOV     DPH,?C_XBP
008A 850082      E     MOV     DPL,?C_XBP+01H
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
0095 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferLoopDetect
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A EF                MOV     A,R7
009B 6014              JZ      ?C0014
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
009D 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferLoopDetect
00A0 E4                CLR     A
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 437
00A2 800D              SJMP    ?C0014
00A4         ?C0010:
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
00A4 90654B            MOV     DPTR,#0654BH
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 850083      E     MOV     DPH,?C_XBP
00AC 850082      E     MOV     DPL,?C_XBP+01H
00AF EF                MOV     A,R7
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 441
00B1         ?C0014:
                                           ; SOURCE LINE # 443
00B1 9044C0            MOV     DPTR,#044C0H
00B4 7408              MOV     A,#08H
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
00B7 850083      E     MOV     DPH,?C_XBP
00BA 850082      E     MOV     DPL,?C_XBP+01H
00BD E0                MOVX    A,@DPTR
00BE FF                MOV     R7,A
                                           ; SOURCE LINE # 453
00BF         ?C0015:
00BF 900003            MOV     DPTR,#03H
00C2 120000      E     LCALL   ?C?ADDXBP
00C5 22                RET     
             ; FUNCTION _?MIDI2_UART_ReadRxData (END)

             ; FUNCTION MIDI2_UART_ReadRxStatus (BEGIN)
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 486
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 34  

                                           ; SOURCE LINE # 489
0000 906569            MOV     DPTR,#06569H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 547F              ANL     A,#07FH
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#status
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
000E 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferOverflow
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 6013              JZ      ?C0016
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
0016 900000      R     MOV     DPTR,#status
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4480              ORL     A,#080H
001E FF                MOV     R7,A
001F 900000      R     MOV     DPTR,#status
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 495
0024 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferOverflow
0027 E4                CLR     A
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0029         ?C0016:
                                           ; SOURCE LINE # 499
0029 900000      R     MOV     DPTR,#status
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 500
002E         ?C0017:
002E 22                RET     
             ; FUNCTION MIDI2_UART_ReadRxStatus (END)

             ; FUNCTION MIDI2_UART_GetChar (BEGIN)
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0000 900000      R     MOV     DPTR,#rxData
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 542
0005 9044C8            MOV     DPTR,#044C8H
0008 7408              MOV     A,#08H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 544
000B 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900000      R     MOV     DPTR,#locRxBufferRead
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
0015 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferWrite
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 35  

0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#locRxBufferWrite
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 547
001F 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferLoopDetect
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 700E              JNZ     ?C0019
0027 900000      R     MOV     DPTR,#locRxBufferWrite
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#locRxBufferRead
002F E0                MOVX    A,@DPTR
0030 FE                MOV     R6,A
0031 EE                MOV     A,R6
0032 6F                XRL     A,R7
0033 6045              JZ      ?C0018
0035         ?C0019:
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 549
0035 900000      R     MOV     DPTR,#locRxBufferRead
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 7400        R     MOV     A,#LOW MIDI2_UART_rxBuffer
003C 2F                ADD     A,R7
003D F582              MOV     DPL,A
003F E4                CLR     A
0040 3400        R     ADDC    A,#HIGH MIDI2_UART_rxBuffer
0042 F583              MOV     DPH,A
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 900000      R     MOV     DPTR,#rxData
0049 EF                MOV     A,R7
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
004B 900000      R     MOV     DPTR,#locRxBufferRead
004E E0                MOVX    A,@DPTR
004F 04                INC     A
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
0051 900000      R     MOV     DPTR,#locRxBufferRead
0054 E0                MOVX    A,@DPTR
0055 FF                MOV     R7,A
0056 EF                MOV     A,R7
0057 C3                CLR     C
0058 94FF              SUBB    A,#0FFH
005A 4005              JC      ?C0020
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 553
005C 900000      R     MOV     DPTR,#locRxBufferRead
005F E4                CLR     A
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
0061         ?C0020:
                                           ; SOURCE LINE # 556
0061 900000      R     MOV     DPTR,#locRxBufferRead
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 36  

0069 EF                MOV     A,R7
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 558
006B 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferLoopDetect
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 EF                MOV     A,R7
0071 6038              JZ      ?C0022
                                           ; SOURCE LINE # 559
                                           ; SOURCE LINE # 560
0073 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferLoopDetect
0076 E4                CLR     A
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 575
                                           ; SOURCE LINE # 577
0078 8031              SJMP    ?C0022
007A         ?C0018:
                                           ; SOURCE LINE # 579
007A 906569            MOV     DPTR,#06569H
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F 900000      R     MOV     DPTR,#rxStatus
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 580
0084 900000      R     MOV     DPTR,#rxStatus
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A 30E51E            JNB     ACC.5,?C0022
                                           ; SOURCE LINE # 581
                                           ; SOURCE LINE # 582
008D 90654B            MOV     DPTR,#0654BH
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 900000      R     MOV     DPTR,#rxData
0095 EF                MOV     A,R7
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
0097 900000      R     MOV     DPTR,#rxStatus
009A E0                MOVX    A,@DPTR
009B FF                MOV     R7,A
009C EF                MOV     A,R7
009D 541E              ANL     A,#01EH
009F FF                MOV     R7,A
00A0 7E00              MOV     R6,#00H
00A2 EF                MOV     A,R7
00A3 4E                ORL     A,R6
00A4 6005              JZ      ?C0022
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
00A6 900000      R     MOV     DPTR,#rxData
00A9 E4                CLR     A
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 589
                                           ; SOURCE LINE # 590
00AB         ?C0022:
                                           ; SOURCE LINE # 592
00AB 9044C0            MOV     DPTR,#044C0H
00AE 7408              MOV     A,#08H
00B0 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 37  

                                           ; SOURCE LINE # 611
00B1 900000      R     MOV     DPTR,#rxData
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
                                           ; SOURCE LINE # 612
00B6         ?C0025:
00B6 22                RET     
             ; FUNCTION MIDI2_UART_GetChar (END)

             ; FUNCTION MIDI2_UART_GetByte (BEGIN)
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 635
                                           ; SOURCE LINE # 640
0000 9044C8            MOV     DPTR,#044C8H
0003 7408              MOV     A,#08H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 641
0006 900000      R     MOV     DPTR,#MIDI2_UART_errorStatus
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 7E00              MOV     R6,#00H
000D 900000      R     MOV     DPTR,#locErrorStatus
0010 EE                MOV     A,R6
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
0015 900000      R     MOV     DPTR,#MIDI2_UART_errorStatus
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 643
001A 9044C0            MOV     DPTR,#044C0H
001D 7408              MOV     A,#08H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
0020 120000      R     LCALL   _?MIDI2_UART_ReadRxData
0023 EF                MOV     A,R7
0024 FD                MOV     R5,A
0025 7C00              MOV     R4,#00H
0027 900000      R     MOV     DPTR,#locErrorStatus
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F EF                MOV     A,R7
0030 7F00              MOV     R7,#00H
0032 FE                MOV     R6,A
0033 EE                MOV     A,R6
0034 4C                ORL     A,R4
0035 FE                MOV     R6,A
0036 EF                MOV     A,R7
0037 4D                ORL     A,R5
0038 FF                MOV     R7,A
                                           ; SOURCE LINE # 649
0039         ?C0026:
0039 22                RET     
             ; FUNCTION MIDI2_UART_GetByte (END)

             ; FUNCTION _?MIDI2_UART_GetRxBufferSize (BEGIN)
                                           ; SOURCE LINE # 683
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 38  

0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
                                           ; SOURCE LINE # 684
                                           ; SOURCE LINE # 691
0006 9044C8            MOV     DPTR,#044C8H
0009 7408              MOV     A,#08H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 693
000C 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferWrite
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
0014 E0                MOVX    A,@DPTR
0015 FE                MOV     R6,A
0016 EE                MOV     A,R6
0017 B5071D            CJNE    A,AR7,?C0027
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 695
001A 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferLoopDetect
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 600B              JZ      ?C0028
                                           ; SOURCE LINE # 696
                                           ; SOURCE LINE # 697
0022 850083      E     MOV     DPH,?C_XBP
0025 850082      E     MOV     DPL,?C_XBP+01H
0028 74FF              MOV     A,#0FFH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 698
002B 804B              SJMP    ?C0030
002D         ?C0028:
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 701
002D 850083      E     MOV     DPH,?C_XBP
0030 850082      E     MOV     DPL,?C_XBP+01H
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 702
                                           ; SOURCE LINE # 703
0035 8041              SJMP    ?C0030
0037         ?C0027:
                                           ; SOURCE LINE # 704
0037 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferWrite
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
003F E0                MOVX    A,@DPTR
0040 FE                MOV     R6,A
0041 EE                MOV     A,R6
0042 C3                CLR     C
0043 9F                SUBB    A,R7
0044 5018              JNC     ?C0031
                                           ; SOURCE LINE # 705
                                           ; SOURCE LINE # 706
0046 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferWrite
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 C3                CLR     C
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 39  

0051 EE                MOV     A,R6
0052 9F                SUBB    A,R7
0053 FF                MOV     R7,A
0054 850083      E     MOV     DPH,?C_XBP
0057 850082      E     MOV     DPL,?C_XBP+01H
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 707
005C 801A              SJMP    ?C0030
005E         ?C0031:
                                           ; SOURCE LINE # 709
                                           ; SOURCE LINE # 710
005E 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 C3                CLR     C
0064 74FF              MOV     A,#0FFH
0066 9F                SUBB    A,R7
0067 FF                MOV     R7,A
0068 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferWrite
006B E0                MOVX    A,@DPTR
006C FE                MOV     R6,A
006D EF                MOV     A,R7
006E 2E                ADD     A,R6
006F FF                MOV     R7,A
0070 850083      E     MOV     DPH,?C_XBP
0073 850082      E     MOV     DPL,?C_XBP+01H
0076 EF                MOV     A,R7
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 711
0078         ?C0030:
                                           ; SOURCE LINE # 713
0078 9044C0            MOV     DPTR,#044C0H
007B 7408              MOV     A,#08H
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 722
007E 850083      E     MOV     DPH,?C_XBP
0081 850082      E     MOV     DPL,?C_XBP+01H
0084 E0                MOVX    A,@DPTR
0085 FF                MOV     R7,A
                                           ; SOURCE LINE # 723
0086         ?C0033:
0086 900001            MOV     DPTR,#01H
0089 120000      E     LCALL   ?C?ADDXBP
008C 22                RET     
             ; FUNCTION _?MIDI2_UART_GetRxBufferSize (END)

             ; FUNCTION MIDI2_UART_ClearRxBuffer (BEGIN)
                                           ; SOURCE LINE # 757
                                           ; SOURCE LINE # 758
                                           ; SOURCE LINE # 762
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 763
0008 90659B            MOV     DPTR,#0659BH
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4401              ORL     A,#01H
0010 FF                MOV     R7,A
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 40  

0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 764
0013 90659B            MOV     DPTR,#0659BH
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54FE              ANL     A,#0FEH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 765
001E 900000      R     MOV     DPTR,#enableInterrupts
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 770
0026 9044C8            MOV     DPTR,#044C8H
0029 7408              MOV     A,#08H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 772
002C 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferRead
002F E4                CLR     A
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
0031 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferWrite
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 774
0036 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferLoopDetect
0039 E4                CLR     A
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 775
003B 900000      R     MOV     DPTR,#MIDI2_UART_rxBufferOverflow
003E E4                CLR     A
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 777
0040 9044C0            MOV     DPTR,#044C0H
0043 7408              MOV     A,#08H
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
0046 22                RET     
             ; FUNCTION MIDI2_UART_ClearRxBuffer (END)

             ; FUNCTION _MIDI2_UART_SetRxAddressMode (BEGIN)
                                           ; SOURCE LINE # 813
0000 900000      R     MOV     DPTR,#addressMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 815
                                           ; SOURCE LINE # 835
                                           ; SOURCE LINE # 836
                                           ; SOURCE LINE # 838
                                           ; SOURCE LINE # 840
0005         ?C0036:
0005 22                RET     
             ; FUNCTION _MIDI2_UART_SetRxAddressMode (END)

             ; FUNCTION _MIDI2_UART_SetRxAddress1 (BEGIN)
                                           ; SOURCE LINE # 857
0000 900000      R     MOV     DPTR,#address
0003 EF                MOV     A,R7
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 41  

0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 858
                                           ; SOURCE LINE # 859
0005 900000      R     MOV     DPTR,#address
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90652B            MOV     DPTR,#0652BH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
000F 22                RET     
             ; FUNCTION _MIDI2_UART_SetRxAddress1 (END)

             ; FUNCTION _MIDI2_UART_SetRxAddress2 (BEGIN)
                                           ; SOURCE LINE # 877
0000 900000      R     MOV     DPTR,#address
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
0005 900000      R     MOV     DPTR,#address
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 90653B            MOV     DPTR,#0653BH
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 880
000F 22                RET     
             ; FUNCTION _MIDI2_UART_SetRxAddress2 (END)

             ; FUNCTION _MIDI2_UART_SetTxInterruptMode (BEGIN)
                                           ; SOURCE LINE # 908
0000 900000      R     MOV     DPTR,#intSrc
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 909
                                           ; SOURCE LINE # 910
0005 900000      R     MOV     DPTR,#intSrc
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 906489            MOV     DPTR,#06489H
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 911
000F 22                RET     
             ; FUNCTION _MIDI2_UART_SetTxInterruptMode (END)

             ; FUNCTION _MIDI2_UART_WriteTxData (BEGIN)
                                           ; SOURCE LINE # 942
0000 900000      R     MOV     DPTR,#txDataByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 943
                                           ; SOURCE LINE # 945
0005 900000      R     MOV     DPTR,#MIDI2_UART_initVar
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 605B              JZ      ?C0044
                                           ; SOURCE LINE # 946
                                           ; SOURCE LINE # 950
000D 9044C8            MOV     DPTR,#044C8H
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 42  

0010 7410              MOV     A,#010H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
0013 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#MIDI2_UART_txBufferRead
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E B50715            CJNE    A,AR7,?C0041
0021 906469            MOV     DPTR,#06469H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 20E20C            JB      ACC.2,?C0041
                                           ; SOURCE LINE # 954
                                           ; SOURCE LINE # 956
002A 900000      R     MOV     DPTR,#txDataByte
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 906449            MOV     DPTR,#06449H
0032 EF                MOV     A,R7
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 957
0034 802C              SJMP    ?C0042
0036         ?C0041:
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 960
0036 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C C3                CLR     C
003D 94FF              SUBB    A,#0FFH
003F 4005              JC      ?C0043
                                           ; SOURCE LINE # 961
                                           ; SOURCE LINE # 962
0041 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
0044 E4                CLR     A
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 963
0046         ?C0043:
                                           ; SOURCE LINE # 965
0046 900000      R     MOV     DPTR,#txDataByte
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
004E E0                MOVX    A,@DPTR
004F FE                MOV     R6,A
0050 7400        R     MOV     A,#LOW MIDI2_UART_txBuffer
0052 2E                ADD     A,R6
0053 F582              MOV     DPL,A
0055 E4                CLR     A
0056 3400        R     ADDC    A,#HIGH MIDI2_UART_txBuffer
0058 F583              MOV     DPH,A
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 968
005C 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
005F E0                MOVX    A,@DPTR
0060 04                INC     A
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 43  

0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 969
0062         ?C0042:
                                           ; SOURCE LINE # 971
0062 9044C0            MOV     DPTR,#044C0H
0065 7410              MOV     A,#010H
0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 979
                                           ; SOURCE LINE # 980
0068         ?C0044:
0068 22                RET     
             ; FUNCTION _MIDI2_UART_WriteTxData (END)

             ; FUNCTION MIDI2_UART_ReadTxStatus (BEGIN)
                                           ; SOURCE LINE # 1003
                                           ; SOURCE LINE # 1004
                                           ; SOURCE LINE # 1005
0000 906469            MOV     DPTR,#06469H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 1006
0005         ?C0045:
0005 22                RET     
             ; FUNCTION MIDI2_UART_ReadTxStatus (END)

             ; FUNCTION _?MIDI2_UART_PutChar (BEGIN)
                                           ; SOURCE LINE # 1041
0000 90FFFF            MOV     DPTR,#0FFFFH
0003 120000      E     LCALL   ?C?ADDXBP
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 90FFFE            MOV     DPTR,#0FFFEH
000B 120000      E     LCALL   ?C?ADDXBP
000E         ?C0048:
                                           ; SOURCE LINE # 1052
                                           ; SOURCE LINE # 1059
000E 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 850083      E     MOV     DPH,?C_XBP
0016 850082      E     MOV     DPL,?C_XBP+01H
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1060
001B 900000      R     MOV     DPTR,#MIDI2_UART_txBufferRead
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 850083      E     MOV     DPH,?C_XBP
0023 850082      E     MOV     DPL,?C_XBP+01H
0026 A3                INC     DPTR
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1069
0029 850083      E     MOV     DPH,?C_XBP
002C 850082      E     MOV     DPL,?C_XBP+01H
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 850083      E     MOV     DPH,?C_XBP
0035 850082      E     MOV     DPL,?C_XBP+01H
0038 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 44  

0039 FE                MOV     R6,A
003A EE                MOV     A,R6
003B C3                CLR     C
003C 9F                SUBB    A,R7
003D 502D              JNC     ?C0049
003F 850083      E     MOV     DPH,?C_XBP
0042 850082      E     MOV     DPL,?C_XBP+01H
0045 A3                INC     DPTR
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 7E00              MOV     R6,#00H
004A EF                MOV     A,R7
004B 24FF              ADD     A,#0FFH
004D FF                MOV     R7,A
004E EE                MOV     A,R6
004F 34FF              ADDC    A,#0FFH
0051 FE                MOV     R6,A
0052 850083      E     MOV     DPH,?C_XBP
0055 850082      E     MOV     DPL,?C_XBP+01H
0058 E0                MOVX    A,@DPTR
0059 FD                MOV     R5,A
005A 7C00              MOV     R4,#00H
005C EF                MOV     A,R7
005D B50508            CJNE    A,AR5,?C0051
0060 EE                MOV     A,R6
0061 B50404            CJNE    A,AR4,?C0051
0064 7F01              MOV     R7,#01H
0066 8002              SJMP    ?C0052
0068         ?C0051:
0068 7F00              MOV     R7,#00H
006A         ?C0052:
006A 801F              SJMP    ?C0050
006C         ?C0049:
006C 850083      E     MOV     DPH,?C_XBP
006F 850082      E     MOV     DPL,?C_XBP+01H
0072 A3                INC     DPTR
0073 E0                MOVX    A,@DPTR
0074 FF                MOV     R7,A
0075 850083      E     MOV     DPH,?C_XBP
0078 850082      E     MOV     DPL,?C_XBP+01H
007B E0                MOVX    A,@DPTR
007C FE                MOV     R6,A
007D C3                CLR     C
007E EE                MOV     A,R6
007F 9F                SUBB    A,R7
0080 FF                MOV     R7,A
0081 EF                MOV     A,R7
0082 B4FE04            CJNE    A,#0FEH,?C0053
0085 7F01              MOV     R7,#01H
0087 8002              SJMP    ?C0054
0089         ?C0053:
0089 7F00              MOV     R7,#00H
008B         ?C0054:
008B         ?C0050:
008B EF                MOV     A,R7
008C 7080              JNZ     ?C0048
                                           ; SOURCE LINE # 1072
008E 850083      E     MOV     DPH,?C_XBP
0091 850082      E     MOV     DPL,?C_XBP+01H
0094 E0                MOVX    A,@DPTR
0095 FF                MOV     R7,A
0096 850083      E     MOV     DPH,?C_XBP
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 45  

0099 850082      E     MOV     DPL,?C_XBP+01H
009C A3                INC     DPTR
009D E0                MOVX    A,@DPTR
009E FE                MOV     R6,A
009F EE                MOV     A,R6
00A0 B5071A            CJNE    A,AR7,?C0055
00A3 906469            MOV     DPTR,#06469H
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 EF                MOV     A,R7
00A9 20E211            JB      ACC.2,?C0055
                                           ; SOURCE LINE # 1073
                                           ; SOURCE LINE # 1075
00AC 850083      E     MOV     DPH,?C_XBP
00AF 850082      E     MOV     DPL,?C_XBP+01H
00B2 A3                INC     DPTR
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 906449            MOV     DPTR,#06449H
00B9 EF                MOV     A,R7
00BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1076
00BB 8059              SJMP    ?C0059
00BD         ?C0055:
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
00BD 850083      E     MOV     DPH,?C_XBP
00C0 850082      E     MOV     DPL,?C_XBP+01H
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 C3                CLR     C
00C7 94FF              SUBB    A,#0FFH
00C9 4008              JC      ?C0057
                                           ; SOURCE LINE # 1080
                                           ; SOURCE LINE # 1081
00CB 850083      E     MOV     DPH,?C_XBP
00CE 850082      E     MOV     DPL,?C_XBP+01H
00D1 E4                CLR     A
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1082
00D3         ?C0057:
                                           ; SOURCE LINE # 1084
00D3 850083      E     MOV     DPH,?C_XBP
00D6 850082      E     MOV     DPL,?C_XBP+01H
00D9 A3                INC     DPTR
00DA A3                INC     DPTR
00DB E0                MOVX    A,@DPTR
00DC FF                MOV     R7,A
00DD 850083      E     MOV     DPH,?C_XBP
00E0 850082      E     MOV     DPL,?C_XBP+01H
00E3 E0                MOVX    A,@DPTR
00E4 FE                MOV     R6,A
00E5 7400        R     MOV     A,#LOW MIDI2_UART_txBuffer
00E7 2E                ADD     A,R6
00E8 F582              MOV     DPL,A
00EA E4                CLR     A
00EB 3400        R     ADDC    A,#HIGH MIDI2_UART_txBuffer
00ED F583              MOV     DPH,A
00EF EF                MOV     A,R7
00F0 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 46  

                                           ; SOURCE LINE # 1085
00F1 850083      E     MOV     DPH,?C_XBP
00F4 850082      E     MOV     DPL,?C_XBP+01H
00F7 E0                MOVX    A,@DPTR
00F8 04                INC     A
00F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1092
00FA 850083      E     MOV     DPH,?C_XBP
00FD 850082      E     MOV     DPL,?C_XBP+01H
0100 E0                MOVX    A,@DPTR
0101 FF                MOV     R7,A
0102 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
0105 EF                MOV     A,R7
0106 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1098
0107 906469            MOV     DPTR,#06469H
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C EF                MOV     A,R7
010D 30E106            JNB     ACC.1,?C0059
                                           ; SOURCE LINE # 1099
                                           ; SOURCE LINE # 1101
0110 9044D0            MOV     DPTR,#044D0H
0113 7410              MOV     A,#010H
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1116
0116         ?C0059:
0116 900003            MOV     DPTR,#03H
0119 120000      E     LCALL   ?C?ADDXBP
011C 22                RET     
             ; FUNCTION _?MIDI2_UART_PutChar (END)

             ; FUNCTION _MIDI2_UART_PutString (BEGIN)
                                           ; SOURCE LINE # 1145
0000 900000      R     MOV     DPTR,#string
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 1146
                                           ; SOURCE LINE # 1147
0006 900000      R     MOV     DPTR,#bufIndex
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C E4                CLR     A
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1150
000E 900000      R     MOV     DPTR,#MIDI2_UART_initVar
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 6042              JZ      ?C0063
                                           ; SOURCE LINE # 1151
0016         ?C0061:
                                           ; SOURCE LINE # 1153
0016 900000      R     MOV     DPTR,#string
0019 120000      E     LCALL   ?C?PLDXDATA
001C 900000      R     MOV     DPTR,#bufIndex
001F E0                MOVX    A,@DPTR
0020 FE                MOV     R6,A
0021 A3                INC     DPTR
0022 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 47  

0023 FF                MOV     R7,A
0024 E9                MOV     A,R1
0025 2F                ADD     A,R7
0026 F9                MOV     R1,A
0027 EA                MOV     A,R2
0028 3E                ADDC    A,R6
0029 FA                MOV     R2,A
002A 120000      E     LCALL   ?C?CLDPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F 6027              JZ      ?C0063
                                           ; SOURCE LINE # 1154
                                           ; SOURCE LINE # 1155
0031 900000      R     MOV     DPTR,#string
0034 120000      E     LCALL   ?C?PLDXDATA
0037 900000      R     MOV     DPTR,#bufIndex
003A E0                MOVX    A,@DPTR
003B FE                MOV     R6,A
003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F E9                MOV     A,R1
0040 2F                ADD     A,R7
0041 F9                MOV     R1,A
0042 EA                MOV     A,R2
0043 3E                ADDC    A,R6
0044 FA                MOV     R2,A
0045 120000      E     LCALL   ?C?CLDPTR
0048 FF                MOV     R7,A
0049 120000      R     LCALL   _?MIDI2_UART_PutChar
                                           ; SOURCE LINE # 1156
004C 900000      R     MOV     DPTR,#bufIndex
004F E4                CLR     A
0050 75F001            MOV     B,#01H
0053 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1157
0056 80BE              SJMP    ?C0061
                                           ; SOURCE LINE # 1158
                                           ; SOURCE LINE # 1159
0058         ?C0063:
0058 22                RET     
             ; FUNCTION _MIDI2_UART_PutString (END)

             ; FUNCTION _MIDI2_UART_PutArray (BEGIN)
                                           ; SOURCE LINE # 1191
0000 900000      R     MOV     DPTR,#string
0003 120000      E     LCALL   ?C?PSTXDATA
0006 900000      R     MOV     DPTR,#byteCount
0009 ED                MOV     A,R5
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1194
000B 900000      R     MOV     DPTR,#bufIndex
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1197
0010 900000      R     MOV     DPTR,#MIDI2_UART_initVar
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 602F              JZ      ?C0067
                                           ; SOURCE LINE # 1198
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 48  

0018         ?C0065:
                                           ; SOURCE LINE # 1199
0018 900000      R     MOV     DPTR,#byteCount
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#bufIndex
0020 E0                MOVX    A,@DPTR
0021 FE                MOV     R6,A
0022 EE                MOV     A,R6
0023 C3                CLR     C
0024 9F                SUBB    A,R7
0025 5020              JNC     ?C0067
                                           ; SOURCE LINE # 1200
                                           ; SOURCE LINE # 1201
0027 900000      R     MOV     DPTR,#string
002A 120000      E     LCALL   ?C?PLDXDATA
002D 900000      R     MOV     DPTR,#bufIndex
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 E9                MOV     A,R1
0033 2F                ADD     A,R7
0034 F9                MOV     R1,A
0035 E4                CLR     A
0036 3A                ADDC    A,R2
0037 FA                MOV     R2,A
0038 120000      E     LCALL   ?C?CLDPTR
003B FF                MOV     R7,A
003C 120000      R     LCALL   _?MIDI2_UART_PutChar
                                           ; SOURCE LINE # 1202
003F 900000      R     MOV     DPTR,#bufIndex
0042 E0                MOVX    A,@DPTR
0043 04                INC     A
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1203
0045 80D1              SJMP    ?C0065
                                           ; SOURCE LINE # 1204
                                           ; SOURCE LINE # 1205
0047         ?C0067:
0047 22                RET     
             ; FUNCTION _MIDI2_UART_PutArray (END)

             ; FUNCTION _MIDI2_UART_PutCRLF (BEGIN)
                                           ; SOURCE LINE # 1230
0000 900000      R     MOV     DPTR,#txDataByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1231
                                           ; SOURCE LINE # 1233
0005 900000      R     MOV     DPTR,#MIDI2_UART_initVar
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 6012              JZ      ?C0069
                                           ; SOURCE LINE # 1234
                                           ; SOURCE LINE # 1235
000D 900000      R     MOV     DPTR,#txDataByte
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 120000      R     LCALL   _?MIDI2_UART_PutChar
                                           ; SOURCE LINE # 1236
0015 7F0D              MOV     R7,#0DH
0017 120000      R     LCALL   _?MIDI2_UART_PutChar
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 49  

                                           ; SOURCE LINE # 1237
001A 7F0A              MOV     R7,#0AH
001C 120000      R     LCALL   _?MIDI2_UART_PutChar
                                           ; SOURCE LINE # 1238
                                           ; SOURCE LINE # 1239
001F         ?C0069:
001F 22                RET     
             ; FUNCTION _MIDI2_UART_PutCRLF (END)

             ; FUNCTION MIDI2_UART_GetTxBufferSize (BEGIN)
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1275
                                           ; SOURCE LINE # 1281
0000 9044C8            MOV     DPTR,#044C8H
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1283
0006 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 900000      R     MOV     DPTR,#MIDI2_UART_txBufferRead
000E E0                MOVX    A,@DPTR
000F FE                MOV     R6,A
0010 EE                MOV     A,R6
0011 B50707            CJNE    A,AR7,?C0070
                                           ; SOURCE LINE # 1284
                                           ; SOURCE LINE # 1285
0014 900000      R     MOV     DPTR,#size
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1286
0019 803B              SJMP    ?C0071
001B         ?C0070:
                                           ; SOURCE LINE # 1287
001B 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#MIDI2_UART_txBufferRead
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EE                MOV     A,R6
0026 C3                CLR     C
0027 9F                SUBB    A,R7
0028 5015              JNC     ?C0072
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1289
002A 900000      R     MOV     DPTR,#MIDI2_UART_txBufferRead
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 C3                CLR     C
0035 EE                MOV     A,R6
0036 9F                SUBB    A,R7
0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#size
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1290
003D 8017              SJMP    ?C0071
003F         ?C0072:
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 50  

                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
003F 900000      R     MOV     DPTR,#MIDI2_UART_txBufferRead
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 C3                CLR     C
0045 74FF              MOV     A,#0FFH
0047 9F                SUBB    A,R7
0048 FF                MOV     R7,A
0049 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E EF                MOV     A,R7
004F 2E                ADD     A,R6
0050 FF                MOV     R7,A
0051 900000      R     MOV     DPTR,#size
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1295
0056         ?C0071:
                                           ; SOURCE LINE # 1297
0056 9044C0            MOV     DPTR,#044C0H
0059 7410              MOV     A,#010H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1320
005C 900000      R     MOV     DPTR,#size
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
                                           ; SOURCE LINE # 1321
0061         ?C0074:
0061 22                RET     
             ; FUNCTION MIDI2_UART_GetTxBufferSize (END)

             ; FUNCTION MIDI2_UART_ClearTxBuffer (BEGIN)
                                           ; SOURCE LINE # 1354
                                           ; SOURCE LINE # 1355
                                           ; SOURCE LINE # 1358
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#enableInterrupts
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1360
0008 906499            MOV     DPTR,#06499H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4401              ORL     A,#01H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1361
0013 906499            MOV     DPTR,#06499H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54FE              ANL     A,#0FEH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1362
001E 900000      R     MOV     DPTR,#enableInterrupts
0021 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 51  

0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1367
0026 9044C8            MOV     DPTR,#044C8H
0029 7410              MOV     A,#010H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1369
002C 900000      R     MOV     DPTR,#MIDI2_UART_txBufferRead
002F E4                CLR     A
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1370
0031 900000      R     MOV     DPTR,#MIDI2_UART_txBufferWrite
0034 E4                CLR     A
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1373
0036 9044C0            MOV     DPTR,#044C0H
0039 7410              MOV     A,#010H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1376
003C 22                RET     
             ; FUNCTION MIDI2_UART_ClearTxBuffer (END)

             ; FUNCTION _MIDI2_UART_SendBreak (BEGIN)
                                           ; SOURCE LINE # 1440
0000 900000      R     MOV     DPTR,#retMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1441
                                           ; SOURCE LINE # 1444
0005 900000      R     MOV     DPTR,#MIDI2_UART_initVar
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 7003              JNZ     $ + 5H
000D 020000      R     LJMP    ?C0089
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1490
0010 900000      R     MOV     DPTR,#retMode
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 600A              JZ      ?C0078
0018 900000      R     MOV     DPTR,#retMode
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 6403              XRL     A,#03H
0020 7028              JNZ     ?C0077
0022         ?C0078:
                                           ; SOURCE LINE # 1492
                                           ; SOURCE LINE # 1501
0022 906539            MOV     DPTR,#06539H
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 900000      R     MOV     DPTR,#txPeriod
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1502
002C 906539            MOV     DPTR,#06539H
002F 7467              MOV     A,#067H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1509
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 52  

0032 906449            MOV     DPTR,#06449H
0035 E4                CLR     A
0036 F0                MOVX    @DPTR,A
0037         ?C0081:
                                           ; SOURCE LINE # 1512
                                           ; SOURCE LINE # 1513
0037 906469            MOV     DPTR,#06469H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C 900000      R     MOV     DPTR,#tmpStat
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1514
                                           ; SOURCE LINE # 1515
0041 900000      R     MOV     DPTR,#tmpStat
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 20E1ED            JB      ACC.1,?C0081
                                           ; SOURCE LINE # 1516
004A         ?C0077:
                                           ; SOURCE LINE # 1518
004A 900000      R     MOV     DPTR,#retMode
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 6401              XRL     A,#01H
0052 6009              JZ      ?C0086
0054 900000      R     MOV     DPTR,#retMode
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A B40316            CJNE    A,#03H,?C0082
                                           ; SOURCE LINE # 1520
005D         ?C0086:
                                           ; SOURCE LINE # 1522
                                           ; SOURCE LINE # 1523
005D 906469            MOV     DPTR,#06469H
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 900000      R     MOV     DPTR,#tmpStat
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1524
                                           ; SOURCE LINE # 1525
0067 900000      R     MOV     DPTR,#tmpStat
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D F4                CPL     A
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 20E0EA            JB      ACC.0,?C0086
                                           ; SOURCE LINE # 1526
0073         ?C0082:
                                           ; SOURCE LINE # 1528
0073 900000      R     MOV     DPTR,#retMode
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 6401              XRL     A,#01H
007B 6013              JZ      ?C0088
C51 COMPILER V9.51   MIDI2_UART                                                            07/22/2017 09:26:17 PAGE 53  

007D 900000      R     MOV     DPTR,#retMode
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 EF                MOV     A,R7
0083 6402              XRL     A,#02H
0085 6009              JZ      ?C0088
0087 900000      R     MOV     DPTR,#retMode
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C EF                MOV     A,R7
008D B4030A            CJNE    A,#03H,?C0089
0090         ?C0088:
                                           ; SOURCE LINE # 1531
                                           ; SOURCE LINE # 1534
0090 900000      R     MOV     DPTR,#txPeriod
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 906539            MOV     DPTR,#06539H
0098 EF                MOV     A,R7
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1544
                                           ; SOURCE LINE # 1546
                                           ; SOURCE LINE # 1547
009A         ?C0089:
009A 22                RET     
             ; FUNCTION _MIDI2_UART_SendBreak (END)

             ; FUNCTION _MIDI2_UART_SetTxAddressMode (BEGIN)
                                           ; SOURCE LINE # 1572
0000 900000      R     MOV     DPTR,#addressMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1573
                                           ; SOURCE LINE # 1575
                                           ; SOURCE LINE # 1576
                                           ; SOURCE LINE # 1581
0005         ?C0090:
                                           ; SOURCE LINE # 1583
                                           ; SOURCE LINE # 1588
                                           ; SOURCE LINE # 1589
0005         ?C0092:
0005 22                RET     
             ; FUNCTION _MIDI2_UART_SetTxAddressMode (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1905    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    519      33
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
