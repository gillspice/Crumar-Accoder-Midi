C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_EPISR
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_episr.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\USB_episr.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(
                    -.\DP8051\DP8051_Keil_951\Debug/USB_episr.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_episr.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USB_episr.c
   3          * \version 3.10
   4          *
   5          * \brief
   6          *  This file contains the Data endpoint Interrupt Service Routines.
   7          *
   8          ********************************************************************************
   9          * \copyright
  10          * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  11          * You may use this file only in accordance with the license, terms, conditions,
  12          * disclaimers, and limitations in the end user license agreement accompanying
  13          * the software package with which this file was provided.
  14          *******************************************************************************/
  15          
  16          #include "USB_pvt.h"
  17          #include "USB_cydmac.h"
  18          #include "cyapicallbacks.h"
  19          
  20          
  21          /***************************************
  22          * Custom Declarations
  23          ***************************************/
  24          /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  25          
  26          /* `#END` */
  27          
  28          
  29          #if (USB_EP1_ISR_ACTIVE)
  30              /******************************************************************************
  31              * Function Name: USB_EP_1_ISR
  32              ***************************************************************************//**
  33              *
  34              *  Endpoint 1 Interrupt Service Routine
  35              *
  36              ******************************************************************************/
  37              CY_ISR(USB_EP_1_ISR)
  38              {
  39   1      
  40   1          #ifdef USB_EP_1_ISR_ENTRY_CALLBACK
                      USB_EP_1_ISR_EntryCallback();
                  #endif /* (USB_EP_1_ISR_ENTRY_CALLBACK) */
  43   1      
  44   1              /* `#START EP1_USER_CODE` Place your code here */
  45   1      
  46   1              /* `#END` */
  47   1      
  48   1          #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
  49   1              !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      {
                          uint8 intEn = EA;
                          CyGlobalIntEnable;  /* Enable nested interrupts. */
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 2   

  54   1          
  55   1              USB_ClearSieEpInterruptSource(USB_SIE_INT_EP1_INTR);
  56   1                  
  57   1              /* Notifies user that transfer IN or OUT transfer is completed.
  58   1              * IN endpoint: endpoint buffer can be reloaded, Host is read data.
  59   1              * OUT endpoint: data is ready to be read from endpoint buffer. 
  60   1              */
  61   1          #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
                      if (0u != (USB_EP[USB_EP1].addr & USB_DIR_IN))
                  #endif /* (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO) */
  64   1              {
  65   2                  /* Read CR0 register to clear SIE lock. */
  66   2                  (void) USB_SIE_EP_BASE.sieEp[USB_EP1].epCr0;
  67   2                  
  68   2                  /* Toggle all endpoint types except ISOC. */
  69   2                  if (USB_GET_EP_TYPE(USB_EP1) != USB_EP_TYPE_ISOC)
  70   2                  {
  71   3                      USB_EP[USB_EP1].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
  72   3                  }
  73   2      
  74   2                  /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to notify
  75   2                  * user that DMA has completed copying data from OUT endpoint which is not completely true.
  76   2                  * Because last chunk of data is being copied.
  77   2                  * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
  78   2                  * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
  79   2                  */
  80   2                  USB_EP[USB_EP1].apiEpState = USB_EVENT_PENDING;
  81   2              }
  82   1      
  83   1          #if (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO))
  84   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && \
  85   1                  !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                          if (USB_midi_out_ep == USB_EP1)
                          {
                              USB_MIDI_OUT_Service();
                          }
                      #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
  91   1          #endif /* (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)) */
  92   1          
  93   1              /* `#START EP1_END_USER_CODE` Place your code here */
  94   1      
  95   1              /* `#END` */
  96   1      
  97   1          #ifdef USB_EP_1_ISR_EXIT_CALLBACK
                      USB_EP_1_ISR_ExitCallback();
                  #endif /* (USB_EP_1_ISR_EXIT_CALLBACK) */
 100   1      
 101   1          #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
 102   1              !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      
                          EA = intEn; /* Restore nested interrupt configuration. */
                      }
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
 107   1          }
 108          
 109          #endif /* (USB_EP1_ISR_ACTIVE) */
 110          
 111          
 112          #if (USB_EP2_ISR_ACTIVE)
 113              /*******************************************************************************
 114              * Function Name: USB_EP_2_ISR
 115              ****************************************************************************//**
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 3   

 116              *
 117              *  Endpoint 2 Interrupt Service Routine.
 118              *
 119              *******************************************************************************/
 120              CY_ISR(USB_EP_2_ISR)
 121              {
 122   1          #ifdef USB_EP_2_ISR_ENTRY_CALLBACK
                      USB_EP_2_ISR_EntryCallback();
                  #endif /* (USB_EP_2_ISR_ENTRY_CALLBACK) */
 125   1      
 126   1              /* `#START EP2_USER_CODE` Place your code here */
 127   1      
 128   1              /* `#END` */
 129   1      
 130   1          #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
 131   1              !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      {
                          uint8 intEn = EA;
                          CyGlobalIntEnable;  /* Enable nested interrupts. */
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
 136   1      
 137   1              USB_ClearSieEpInterruptSource(USB_SIE_INT_EP2_INTR);
 138   1      
 139   1              /* Notifies user that transfer IN or OUT transfer is completed.
 140   1              * IN endpoint: endpoint buffer can be reloaded, Host is read data.
 141   1              * OUT endpoint: data is ready to be read from endpoint buffer. 
 142   1              */
 143   1          #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
                      if (0u != (USB_EP[USB_EP2].addr & USB_DIR_IN))
                  #endif /* (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO) */
 146   1              {            
 147   2                  /* Read CR0 register to clear SIE lock. */
 148   2                  (void) USB_SIE_EP_BASE.sieEp[USB_EP2].epCr0;
 149   2                  
 150   2                  /* Toggle all endpoint types except ISOC. */
 151   2                  if (USB_GET_EP_TYPE(USB_EP2) != USB_EP_TYPE_ISOC)
 152   2                  {
 153   3                      USB_EP[USB_EP2].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
 154   3                  }
 155   2      
 156   2                  /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to notify
 157   2                  * user that DMA has completed copying data from OUT endpoint which is not completely true.
 158   2                  * Because last chunk of data is being copied.
 159   2                  * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
 160   2                  * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
 161   2                  */
 162   2                  USB_EP[USB_EP2].apiEpState = USB_EVENT_PENDING;
 163   2              }
 164   1      
 165   1          #if (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO))
 166   1              #if (defined(USB_ENABLE_MIDI_STREAMING) && \
 167   1                  !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                          if (USB_midi_out_ep == USB_EP2)
                          {
                              USB_MIDI_OUT_Service();
                          }
                      #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
 173   1          #endif /* (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)) */        
 174   1          
 175   1              /* `#START EP2_END_USER_CODE` Place your code here */
 176   1      
 177   1              /* `#END` */
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 4   

 178   1      
 179   1          #ifdef USB_EP_2_ISR_EXIT_CALLBACK
                      USB_EP_2_ISR_ExitCallback();
                  #endif /* (USB_EP_2_ISR_EXIT_CALLBACK) */
 182   1      
 183   1          #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
 184   1              !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      
                          EA = intEn; /* Restore nested interrupt configuration. */
                      }
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
 189   1          }
 190          #endif /* (USB_EP2_ISR_ACTIVE) */
 191          
 192          
 193          #if (USB_EP3_ISR_ACTIVE)
                  /*******************************************************************************
                  * Function Name: USB_EP_3_ISR
                  ****************************************************************************//**
                  *
                  *  Endpoint 3 Interrupt Service Routine.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_3_ISR)
                  {
                  #ifdef USB_EP_3_ISR_ENTRY_CALLBACK
                      USB_EP_3_ISR_EntryCallback();
                  #endif /* (USB_EP_3_ISR_ENTRY_CALLBACK) */
              
                      /* `#START EP3_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      {
                          uint8 intEn = EA;
                          CyGlobalIntEnable;  /* Enable nested interrupts. */
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
              
                      USB_ClearSieEpInterruptSource(USB_SIE_INT_EP3_INTR);    
              
                      /* Notifies user that transfer IN or OUT transfer is completed.
                      * IN endpoint: endpoint buffer can be reloaded, Host is read data.
                      * OUT endpoint: data is ready to be read from endpoint buffer. 
                      */
                  #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
                      if (0u != (USB_EP[USB_EP3].addr & USB_DIR_IN))
                  #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
                      {            
                          /* Read CR0 register to clear SIE lock. */
                          (void) USB_SIE_EP_BASE.sieEp[USB_EP3].epCr0;
              
                          /* Toggle all endpoint types except ISOC. */
                          if (USB_GET_EP_TYPE(USB_EP3) != USB_EP_TYPE_ISOC)
                          {
                              USB_EP[USB_EP3].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                          }
              
                          /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to notify
                          * user that DMA has completed copying data from OUT endpoint which is not completely true.
                          * Because last chunk of data is being copied.
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 5   

                          * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
                          * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
                          */
                          USB_EP[USB_EP3].apiEpState = USB_EVENT_PENDING;
                      }
              
                  #if (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO))
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && \
                          !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                          if (USB_midi_out_ep == USB_EP3)
                          {
                              USB_MIDI_OUT_Service();
                          }
                      #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
                  #endif /* (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)) */        
              
                      /* `#START EP3_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #ifdef USB_EP_3_ISR_EXIT_CALLBACK
                      USB_EP_3_ISR_ExitCallback();
                  #endif /* (USB_EP_3_ISR_EXIT_CALLBACK) */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      
                          EA = intEn; /* Restore nested interrupt configuration. */
                      }
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
                  }
              #endif /* (USB_EP3_ISR_ACTIVE) */
 272          
 273          
 274          #if (USB_EP4_ISR_ACTIVE)
                  /*******************************************************************************
                  * Function Name: USB_EP_4_ISR
                  ****************************************************************************//**
                  *
                  *  Endpoint 4 Interrupt Service Routine.
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_4_ISR)
                  {
                  #ifdef USB_EP_4_ISR_ENTRY_CALLBACK
                      USB_EP_4_ISR_EntryCallback();
                  #endif /* (USB_EP_4_ISR_ENTRY_CALLBACK) */
              
                      /* `#START EP4_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      {
                          uint8 intEn = EA;
                          CyGlobalIntEnable;  /* Enable nested interrupts. */
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
              
                      USB_ClearSieEpInterruptSource(USB_SIE_INT_EP4_INTR);
                      
                      /* Notifies user that transfer IN or OUT transfer is completed.
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 6   

                      * IN endpoint: endpoint buffer can be reloaded, Host is read data.
                      * OUT endpoint: data is ready to read from endpoint buffer. 
                      */
                  #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
                      if (0u != (USB_EP[USB_EP4].addr & USB_DIR_IN))
                  #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
                      {
                          /* Read CR0 register to clear SIE lock. */
                          (void) USB_SIE_EP_BASE.sieEp[USB_EP4].epCr0;
              
                          /* Toggle all endpoint types except ISOC. */
                          if (USB_GET_EP_TYPE(USB_EP4) != USB_EP_TYPE_ISOC)
                          {
                              USB_EP[USB_EP4].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                          }
              
                          /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to notify
                          * user that DMA has completed copying data from OUT endpoint which is not completely true.
                          * Because last chunk of data is being copied.
                          * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
                          * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
                          */
                          USB_EP[USB_EP4].apiEpState = USB_EVENT_PENDING;
                      }
              
                  #if (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO))
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && \
                          !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP4)
                          {
                              USB_MIDI_OUT_Service();
                          }
                      #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
                  #endif /* (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)) */        
              
                      /* `#START EP4_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #ifdef USB_EP_4_ISR_EXIT_CALLBACK
                      USB_EP_4_ISR_ExitCallback();
                  #endif /* (USB_EP_4_ISR_EXIT_CALLBACK) */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      
                          EA = intEn; /* Restore nested interrupt configuration. */
                      }
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
                  }
              #endif /* (USB_EP4_ISR_ACTIVE) */
 353          
 354          
 355          #if (USB_EP5_ISR_ACTIVE)
                  /*******************************************************************************
                  * Function Name: USB_EP_5_ISR
                  ****************************************************************************//**
                  *
                  *  Endpoint 5 Interrupt Service Routine
                  *
                  *
                  *******************************************************************************/
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 7   

                  CY_ISR(USB_EP_5_ISR)
                  {
                  #ifdef USB_EP_5_ISR_ENTRY_CALLBACK
                      USB_EP_5_ISR_EntryCallback();
                  #endif /* (USB_EP_5_ISR_ENTRY_CALLBACK) */
              
                      /* `#START EP5_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #if (defined(USB_ENABLE_MIDI_STREAMING) && !defined(USB_MAIN_SERVICE_MIDI_OUT) && \
                               USB_ISR_SERVICE_MIDI_OUT && CY_PSOC3)
                      {
                          uint8 intEn = EA;
                          CyGlobalIntEnable;  /* Enable nested interrupts. */
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
              
                      USB_ClearSieEpInterruptSource(USB_SIE_INT_EP5_INTR);
                  
                      /* Notifies user that transfer IN or OUT transfer is completed.
                      * IN endpoint: endpoint buffer can be reloaded, Host is read data.
                      * OUT endpoint: data is ready to read from endpoint buffer. 
                      */
                  #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
                      if (0u != (USB_EP[USB_EP5].addr & USB_DIR_IN))
                  #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
                      {            
                          /* Read CR0 register to clear SIE lock. */
                          (void) USB_SIE_EP_BASE.sieEp[USB_EP5].epCr0;
              
                          /* Toggle all endpoint types except ISOC. */
                          if (USB_GET_EP_TYPE(USB_EP5) != USB_EP_TYPE_ISOC)
                          {
                              USB_EP[USB_EP5].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                          }
              
                          /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to notify
                          * user that DMA has completed copying data from OUT endpoint which is not completely true.
                          * Because last chunk of data is being copied.
                          * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
                          * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
                          */
                          USB_EP[USB_EP5].apiEpState = USB_EVENT_PENDING;
                      }
              
                  #if (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO))        
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && \
                          !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                          if (USB_midi_out_ep == USB_EP5)
                          {
                              USB_MIDI_OUT_Service();
                          }
                      #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
                  #endif /* (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)) */
              
                      /* `#START EP5_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #ifdef USB_EP_5_ISR_EXIT_CALLBACK
                      USB_EP_5_ISR_ExitCallback();
                  #endif /* (USB_EP_5_ISR_EXIT_CALLBACK) */
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 8   

              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      
                          EA = intEn; /* Restore nested interrupt configuration. */
                      }
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
                  }
              #endif /* (USB_EP5_ISR_ACTIVE) */
 435          
 436          
 437          #if (USB_EP6_ISR_ACTIVE)
                  /*******************************************************************************
                  * Function Name: USB_EP_6_ISR
                  ****************************************************************************//**
                  *
                  *  Endpoint 6 Interrupt Service Routine.
                  *
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_6_ISR)
                  {
                  #ifdef USB_EP_6_ISR_ENTRY_CALLBACK
                      USB_EP_6_ISR_EntryCallback();
                  #endif /* (USB_EP_6_ISR_ENTRY_CALLBACK) */
              
                      /* `#START EP6_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      {
                          uint8 intEn = EA;
                          CyGlobalIntEnable;  /* Enable nested interrupts. */
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
              
                      USB_ClearSieEpInterruptSource(USB_SIE_INT_EP6_INTR);
                      
                      /* Notifies user that transfer IN or OUT transfer is completed.
                      * IN endpoint: endpoint buffer can be reloaded, Host is read data.
                      * OUT endpoint: data is ready to read from endpoint buffer. 
                      */
                  #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
                      if (0u != (USB_EP[USB_EP6].addr & USB_DIR_IN))
                  #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
                      {
                          /* Read CR0 register to clear SIE lock. */
                          (void) USB_SIE_EP_BASE.sieEp[USB_EP6].epCr0;
              
                          /* Toggle all endpoint types except ISOC. */
                          if (USB_GET_EP_TYPE(USB_EP6) != USB_EP_TYPE_ISOC)
                          {
                              USB_EP[USB_EP6].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                          }
                          
                          /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to notify
                          * user that DMA has completed copying data from OUT endpoint which is not completely true.
                          * Because last chunk of data is being copied.
                          * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
                          * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
                          */
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 9   

                          USB_EP[USB_EP6].apiEpState = USB_EVENT_PENDING;
                      }
              
                  #if (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO))
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && \
                          !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                          if (USB_midi_out_ep == USB_EP6)
                          {
                              USB_MIDI_OUT_Service();
                          }
                      #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
                  #endif /* (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)) */
              
                      /* `#START EP6_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #ifdef USB_EP_6_ISR_EXIT_CALLBACK
                      USB_EP_6_ISR_ExitCallback();
                  #endif /* (USB_EP_6_ISR_EXIT_CALLBACK) */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      
                          EA = intEn; /* Restore nested interrupt configuration. */
                      }
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
                  }
              #endif /* (USB_EP6_ISR_ACTIVE) */
 517          
 518          
 519          #if (USB_EP7_ISR_ACTIVE)
                  /*******************************************************************************
                  * Function Name: USB_EP_7_ISR
                  ****************************************************************************//**
                  *
                  *  Endpoint 7 Interrupt Service Routine.
                  *
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_7_ISR)
                  {
                  #ifdef USB_EP_7_ISR_ENTRY_CALLBACK
                      USB_EP_7_ISR_EntryCallback();
                  #endif /* (USB_EP_7_ISR_ENTRY_CALLBACK) */
              
                      /* `#START EP7_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      {
                          uint8 intEn = EA;
                          CyGlobalIntEnable;  /* Enable nested interrupts. */
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
                  
                      USB_ClearSieEpInterruptSource(USB_SIE_INT_EP7_INTR);
                      
                      /* Notifies user that transfer IN or OUT transfer is completed.
                      * IN endpoint: endpoint buffer can be reloaded, Host is read data.
                      * OUT endpoint: data is ready to read from endpoint buffer. 
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 10  

                      */
                  #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
                      if (0u != (USB_EP[USB_EP7].addr & USB_DIR_IN))
                  #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
                      {           
                          /* Read CR0 register to clear SIE lock. */
                          (void) USB_SIE_EP_BASE.sieEp[USB_EP7].epCr0;
              
                          /* Toggle all endpoint types except ISOC. */
                          if (USB_GET_EP_TYPE(USB_EP7) != USB_EP_TYPE_ISOC)
                          {
                              USB_EP[USB_EP7].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                          }
                          
                          /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to notify
                          * user that DMA has completed copying data from OUT endpoint which is not completely true.
                          * Because last chunk of data is being copied.
                          * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
                          * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
                          */
                          USB_EP[USB_EP7].apiEpState = USB_EVENT_PENDING;
                      }
              
              
                  #if (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO))
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && \
                          !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                          if(USB_midi_out_ep == USB_EP7)
                          {
                              USB_MIDI_OUT_Service();
                          }
                      #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
                  #endif /* (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)) */
              
                      /* `#START EP7_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #ifdef USB_EP_7_ISR_EXIT_CALLBACK
                      USB_EP_7_ISR_ExitCallback();
                  #endif /* (USB_EP_7_ISR_EXIT_CALLBACK) */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      
                          EA = intEn; /* Restore nested interrupt configuration. */
                      }
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
                  }
              #endif /* (USB_EP7_ISR_ACTIVE) */
 600          
 601          
 602          #if (USB_EP8_ISR_ACTIVE)
                  /*******************************************************************************
                  * Function Name: USB_EP_8_ISR
                  ****************************************************************************//**
                  *
                  *  Endpoint 8 Interrupt Service Routine
                  *
                  *
                  *******************************************************************************/
                  CY_ISR(USB_EP_8_ISR)
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 11  

                  {
                  #ifdef USB_EP_8_ISR_ENTRY_CALLBACK
                      USB_EP_8_ISR_EntryCallback();
                  #endif /* (USB_EP_8_ISR_ENTRY_CALLBACK) */
              
                      /* `#START EP8_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      {
                          uint8 intEn = EA;
                          CyGlobalIntEnable;  /* Enable nested interrupts. */
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
              
                      USB_ClearSieEpInterruptSource(USB_SIE_INT_EP8_INTR);
                      
                      /* Notifies user that transfer IN or OUT transfer is completed.
                      * IN endpoint: endpoint buffer can be reloaded, Host is read data.
                      * OUT endpoint: data is ready to read from endpoint buffer. 
                      */
                  #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
                      if (0u != (USB_EP[USB_EP8].addr & USB_DIR_IN))
                  #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
                      {
                          /* Read CR0 register to clear SIE lock. */
                          (void) USB_SIE_EP_BASE.sieEp[USB_EP8].epCr0;
              
                          /* Toggle all endpoint types except ISOC. */
                          if (USB_GET_EP_TYPE(USB_EP8) != USB_EP_TYPE_ISOC)
                          {
                              USB_EP[USB_EP8].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                          }
              
                          /* EP_MANAGEMENT_DMA_AUTO (Ticket ID# 214187): For OUT endpoint this event is used to notify
                          * user that DMA has completed copying data from OUT endpoint which is not completely true.
                          * Because last chunk of data is being copied.
                          * For CY_PSOC 3/5LP: it is acceptable as DMA is really fast.
                          * For CY_PSOC4: this event is set in Arbiter interrupt (source is DMA_TERMIN).
                          */
                          USB_EP[USB_EP8].apiEpState = USB_EVENT_PENDING;
                      }
              
                  #if (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO))
                      #if (defined(USB_ENABLE_MIDI_STREAMING) && \
                          !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                          if (USB_midi_out_ep == USB_EP8)
                          {
                              USB_MIDI_OUT_Service();
                          }
                      #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
                  #endif /* (!(CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)) */
              
                      /* `#START EP8_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #ifdef USB_EP_8_ISR_EXIT_CALLBACK
                      USB_EP_8_ISR_ExitCallback();
                  #endif /* (USB_EP_8_ISR_EXIT_CALLBACK) */
              
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 12  

                  #if (CY_PSOC3 && defined(USB_ENABLE_MIDI_STREAMING) && \
                      !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
                      
                          EA = intEn; /* Restore nested interrupt configuration. */
                      }
                  #endif /* (CY_PSOC3 && USB_ISR_SERVICE_MIDI_OUT) */
                  }
              #endif /* (USB_EP8_ISR_ACTIVE) */
 682          
 683          
 684          #if (USB_SOF_ISR_ACTIVE)
 685              /*******************************************************************************
 686              * Function Name: USB_SOF_ISR
 687              ****************************************************************************//**
 688              *
 689              *  Start of Frame Interrupt Service Routine.
 690              *
 691              *
 692              *******************************************************************************/
 693              CY_ISR(USB_SOF_ISR)
 694              {
 695   1          #ifdef USB_SOF_ISR_ENTRY_CALLBACK
                      USB_SOF_ISR_EntryCallback();
                  #endif /* (USB_SOF_ISR_ENTRY_CALLBACK) */
 698   1      
 699   1              /* `#START SOF_USER_CODE` Place your code here */
 700   1      
 701   1              /* `#END` */
 702   1      
 703   1              USB_ClearSieInterruptSource(USB_INTR_SIE_SOF_INTR);
 704   1      
 705   1          #ifdef USB_SOF_ISR_EXIT_CALLBACK
                      USB_SOF_ISR_ExitCallback();
                  #endif /* (USB_SOF_ISR_EXIT_CALLBACK) */
 708   1          }
 709          #endif /* (USB_SOF_ISR_ACTIVE) */
 710          
 711          
 712          #if (USB_BUS_RESET_ISR_ACTIVE)
 713          /*******************************************************************************
 714          * Function Name: USB_BUS_RESET_ISR
 715          ****************************************************************************//**
 716          *
 717          *  USB Bus Reset Interrupt Service Routine.  Calls _Start with the same
 718          *  parameters as the last USER call to _Start
 719          *
 720          *
 721          *******************************************************************************/
 722          CY_ISR(USB_BUS_RESET_ISR)
 723          {
 724   1      #ifdef USB_BUS_RESET_ISR_ENTRY_CALLBACK
                  USB_BUS_RESET_ISR_EntryCallback();
              #endif /* (USB_BUS_RESET_ISR_ENTRY_CALLBACK) */
 727   1      
 728   1          /* `#START BUS_RESET_USER_CODE` Place your code here */
 729   1      
 730   1          /* `#END` */
 731   1      
 732   1          USB_ClearSieInterruptSource(USB_INTR_SIE_BUS_RESET_INTR);
 733   1      
 734   1          USB_ReInitComponent();
 735   1      
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 13  

 736   1      #ifdef USB_BUS_RESET_ISR_EXIT_CALLBACK
                  USB_BUS_RESET_ISR_ExitCallback();
              #endif /* (USB_BUS_RESET_ISR_EXIT_CALLBACK) */
 739   1      }
 740          #endif /* (USB_BUS_RESET_ISR_ACTIVE) */
 741          
 742          
 743          #if (USB_LPM_ACTIVE)
              /***************************************************************************
              * Function Name: USB_INTR_LPM_ISR
              ************************************************************************//**
              *
              *   Interrupt Service Routine for LPM of the interrupt sources.
              *
              *
              ***************************************************************************/
              CY_ISR(USB_LPM_ISR)
              {
              #ifdef USB_LPM_ISR_ENTRY_CALLBACK
                  USB_LPM_ISR_EntryCallback();
              #endif /* (USB_LPM_ISR_ENTRY_CALLBACK) */
              
                  /* `#START LPM_BEGIN_USER_CODE` Place your code here */
              
                  /* `#END` */
              
                  USB_ClearSieInterruptSource(USB_INTR_SIE_LPM_INTR);
              
                  /* `#START LPM_END_USER_CODE` Place your code here */
              
                  /* `#END` */
              
              #ifdef USB_LPM_ISR_EXIT_CALLBACK
                  USB_LPM_ISR_ExitCallback();
              #endif /* (USB_LPM_ISR_EXIT_CALLBACK) */
              }
              #endif /* (USB_LPM_ACTIVE) */
 773          
 774          
 775          #if (USB_EP_MANAGEMENT_DMA && USB_ARB_ISR_ACTIVE)
                  /***************************************************************************
                  * Function Name: USB_ARB_ISR
                  ************************************************************************//**
                  *
                  *  Arbiter Interrupt Service Routine.
                  *
                  *
                  ***************************************************************************/
                  CY_ISR(USB_ARB_ISR)
                  {
                      uint8 arbIntrStatus;
                      uint8 epStatus;
                      uint8 ep = USB_EP1;
              
                  #ifdef USB_ARB_ISR_ENTRY_CALLBACK
                      USB_ARB_ISR_EntryCallback();
                  #endif /* (USB_ARB_ISR_ENTRY_CALLBACK) */
              
                      /* `#START ARB_BEGIN_USER_CODE` Place your code here */
              
                      /* `#END` */
              
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 14  

                      /* Get pending ARB interrupt sources. */
                      arbIntrStatus = USB_ARB_INT_SR_REG;
              
                      while (0u != arbIntrStatus)
                      {
                          /* Check which EP is interrupt source. */
                          if (0u != (arbIntrStatus & 0x01u))
                          {
                              /* Get endpoint enable interrupt sources. */
                              epStatus = (USB_ARB_EP_BASE.arbEp[ep].epSr & USB_ARB_EP_BASE.arbEp[ep].epIntEn);
              
                              /* Handle IN endpoint buffer full event: happens only once when endpoint buffer is loaded.
             - */
                              if (0u != (epStatus & USB_ARB_EPX_INT_IN_BUF_FULL))
                              {
                                  if (0u != (USB_EP[ep].addr & USB_DIR_IN))
                                  {
                                      /* Clear data ready status. */
                                      USB_ARB_EP_BASE.arbEp[ep].epCfg &= (uint8) ~USB_ARB_EPX_CFG_IN_DATA_RDY;
              
                                  #if (CY_PSOC3 || CY_PSOC5LP)
                                      #if (USB_EP_MANAGEMENT_DMA_AUTO && (USB_EP_DMA_AUTO_OPT == 0u))
                                          /* Set up common area DMA with rest of data. */
                                          if(USB_inLength[ep] > USB_DMA_BYTES_PER_BURST)
                                          {
                                              USB_LoadNextInEP(ep, 0u);
                                          }
                                          else
                                          {
                                              USB_inBufFull[ep] = 1u;
                                          }
                                      #endif /* (USB_EP_MANAGEMENT_DMA_AUTO && (USB_EP_DMA_AUTO_OPT == 0u)) */
                                  #endif /* (CY_PSOC3 || CY_PSOC5LP) */
              
                                      /* Arm IN endpoint. */
                                      USB_SIE_EP_BASE.sieEp[ep].epCr0 = USB_EP[ep].epMode;
              
                                  #if (defined(USB_ENABLE_MIDI_STREAMING) && USB_ISR_SERVICE_MIDI_IN)
                                      if (ep == USB_midi_in_ep)
                                      {
                                          /* Clear MIDI input pointer. */
                                          USB_midiInPointer = 0u;
                                      }
                                  #endif /* (USB_ENABLE_MIDI_STREAMING) */
                                  }
                              }
              
                          #if (USB_EP_MANAGEMENT_DMA_MANUAL)
                              /* Handle DMA completion event for OUT endpoints. */
                              if (0u != (epStatus & USB_ARB_EPX_SR_DMA_GNT))
                              {
                                  if (0u == (USB_EP[ep].addr & USB_DIR_IN))
                                  {
                                      /* Notify user that data has been copied from endpoint buffer. */
                                      USB_EP[ep].apiEpState = USB_NO_EVENT_PENDING;
              
                                      /* DMA done coping data: OUT endpoint has to be re-armed by user. */
                                  }
                              }
                          #endif /* (USB_EP_MANAGEMENT_DMA_MANUAL) */
              
                          #if (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO)
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 15  

                              /* Handle DMA completion event for OUT endpoints. */
                              if (0u != (epStatus & USB_ARB_EPX_INT_DMA_TERMIN))
                              {
                                  uint32 channelNum = USB_DmaChan[ep];
              
                                  /* Restore burst counter for endpoint. */
                                  USB_DmaEpBurstCnt[ep] = USB_DMA_GET_BURST_CNT(USB_DmaEpBurstCntBackup[ep]);
              
                                  /* Disable DMA channel to restore descriptor configuration. The on-going transfer is a
             -borted. */
                                  USB_CyDmaChDisable(channelNum);
              
                                  /* Generate DMA tr_out signal to notify USB IP that DMA is done. This signal is not ge
             -nerated
                                  * when transfer was aborted (it occurs when host writes less bytes than buffer size).
                                  */
                                  USB_CyDmaTriggerOut(USB_DmaBurstEndOut[ep]);
              
                                  /* Restore destination address for output endpoint. */
                                  USB_CyDmaSetDstAddress(channelNum, USB_DMA_DESCR0, (void*) ((uint32) USB_DmaEpBufferAd
             -drBackup[ep]));
                                  USB_CyDmaSetDstAddress(channelNum, USB_DMA_DESCR1, (void*) ((uint32) USB_DmaEpBufferAd
             -drBackup[ep] +
                                                                                                                        
             -         USB_DMA_BYTES_PER_BURST));
              
                                  /* Restore number of data elements to transfer which was adjusted for last burst. */
                                  if (0u != (USB_DmaEpLastBurstEl[ep] & USB_DMA_DESCR_REVERT))
                                  {
                                      USB_CyDmaSetNumDataElements(channelNum, (USB_DmaEpLastBurstEl[ep] >> USB_DMA_DESCR
             -_SHIFT),
                                                                                           USB_DMA_GET_MAX_ELEM_PER_BURS
             -T(USB_DmaEpLastBurstEl[ep]));
                                  }
              
                                  /* Validate descriptor 0 and 1 (also reset current state). Command to start with descr
             -iptor 0. */
                                  USB_CyDmaValidateDescriptor(channelNum, USB_DMA_DESCR0);
                                  if (USB_DmaEpBurstCntBackup[ep] > 1u)
                                  {
                                      USB_CyDmaValidateDescriptor(channelNum, USB_DMA_DESCR1);
                                  }
                                  USB_CyDmaSetDescriptor0Next(channelNum);
              
                                  /* Enable DMA channel: configuration complete. */
                                  USB_CyDmaChEnable(channelNum);
                                  
                                  
                                  /* Read CR0 register to clear SIE lock. */
                                  (void) USB_SIE_EP_BASE.sieEp[ep].epCr0;
                                  
                                  /* Toggle all endpoint types except ISOC. */
                                  if (USB_GET_EP_TYPE(ep) != USB_EP_TYPE_ISOC)
                                  {
                                      USB_EP[ep].epToggle ^= USB_EPX_CNT_DATA_TOGGLE;
                                  }
                          
                                  /* Notify user that data has been copied from endpoint buffer. */
                                  USB_EP[ep].apiEpState = USB_EVENT_PENDING;
                                  
                              #if (defined(USB_ENABLE_MIDI_STREAMING) && \
                                  !defined(USB_MAIN_SERVICE_MIDI_OUT) && USB_ISR_SERVICE_MIDI_OUT)
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 16  

                                  if (USB_midi_out_ep == ep)
                                  {
                                      USB_MIDI_OUT_Service();
                                  }
                              #endif /* (USB_ISR_SERVICE_MIDI_OUT) */
                              }
                          #endif /* (CY_PSOC4 && USB_EP_MANAGEMENT_DMA_AUTO) */
              
              
                              /* `#START ARB_USER_CODE` Place your code here for handle Buffer Underflow/Overflow */
              
                              /* `#END` */
              
                          #ifdef USB_ARB_ISR_CALLBACK
                              USB_ARB_ISR_Callback(ep, epStatus);
                          #endif /* (USB_ARB_ISR_CALLBACK) */
              
                              /* Clear serviced endpoint interrupt sources. */
                              USB_ARB_EP_BASE.arbEp[ep].epSr = epStatus;
                          }
              
                          ++ep;
                          arbIntrStatus >>= 1u;
                      }
              
                      /* `#START ARB_END_USER_CODE` Place your code here */
              
                      /* `#END` */
              
                  #ifdef USB_ARB_ISR_EXIT_CALLBACK
                      USB_ARB_ISR_ExitCallback();
                  #endif /* (USB_ARB_ISR_EXIT_CALLBACK) */
                  }
              
              #endif /*  (USB_ARB_ISR_ACTIVE && USB_EP_MANAGEMENT_DMA) */
 948          
 949          
 950          #if (USB_EP_MANAGEMENT_DMA_AUTO)
              #if (CY_PSOC4)
              
                  /******************************************************************************
                  * Function Name: USB_EPxDmaDone
                  ***************************************************************************//**
                  *
                  * \internal
                  *  Endpoint  DMA Done Interrupt Service Routine basic function .
                  *  
                  *  \param dmaCh
                  *  number of DMA channel
                  *  
                  *  \param ep
                  *  number of USB end point
                  *  
                  *  \param dmaDone
                  *  transfer completion flag
                  *  
                  *  \return
                  *   updated transfer completion flag
                  *
                  ******************************************************************************/
                  CY_INLINE static void USB_EPxDmaDone(uint8 dmaCh, uint8 ep)
                  {
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 17  

                      uint32 nextAddr;
              
                      /* Manage data elements which remain to transfer. */
                      if (0u != USB_DmaEpBurstCnt[ep])
                      {
                          if(USB_DmaEpBurstCnt[ep] <= 2u)
                          {
                              /* Adjust length of last burst. */
                              USB_CyDmaSetNumDataElements(dmaCh,
                                                                  ((uint32) USB_DmaEpLastBurstEl[ep] >> USB_DMA_DESCR_SH
             -IFT),
                                                                  ((uint32) USB_DmaEpLastBurstEl[ep] &  USB_DMA_BURST_BY
             -TES_MASK));
                          }
                          
              
                          /* Advance source for input endpoint or destination for output endpoint. */
                          if (0u != (USB_EP[ep].addr & USB_DIR_IN))
                          {
                              /* Change source for descriptor 0. */
                              nextAddr = (uint32) USB_CyDmaGetSrcAddress(dmaCh, USB_DMA_DESCR0);
                              nextAddr += (2u * USB_DMA_BYTES_PER_BURST);
                              USB_CyDmaSetSrcAddress(dmaCh, USB_DMA_DESCR0, (void *) nextAddr);
              
                              /* Change source for descriptor 1. */
                              nextAddr += USB_DMA_BYTES_PER_BURST;
                              USB_CyDmaSetSrcAddress(dmaCh, USB_DMA_DESCR1, (void *) nextAddr);
                          }
                          else
                          {
                              /* Change destination for descriptor 0. */
                              nextAddr  = (uint32) USB_CyDmaGetDstAddress(dmaCh, USB_DMA_DESCR0);
                              nextAddr += (2u * USB_DMA_BYTES_PER_BURST);
                              USB_CyDmaSetDstAddress(dmaCh, USB_DMA_DESCR0, (void *) nextAddr);
              
                              /* Change destination for descriptor 1. */
                              nextAddr += USB_DMA_BYTES_PER_BURST;
                              USB_CyDmaSetDstAddress(dmaCh, USB_DMA_DESCR1, (void *) nextAddr);
                          }
              
                          /* Enable DMA to execute transfer as it was disabled because there were no valid descriptor. *
             -/
                          USB_CyDmaValidateDescriptor(dmaCh, USB_DMA_DESCR0);
                          
                          --USB_DmaEpBurstCnt[ep];
                          if (0u != USB_DmaEpBurstCnt[ep])
                          {
                              USB_CyDmaValidateDescriptor(dmaCh, USB_DMA_DESCR1);
                              --USB_DmaEpBurstCnt[ep];
                          }
                          
                          USB_CyDmaChEnable (dmaCh);
                          USB_CyDmaTriggerIn(USB_DmaReqOut[ep]);
                      }
                      else
                      {
                          /* No data to transfer. False DMA trig. Ignore.  */
                      }
              
                  }
              
                  #if (USB_DMA1_ACTIVE)
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 18  

                      /******************************************************************************
                      * Function Name: USB_EP1_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  Endpoint 1 DMA Done Interrupt Service Routine.
                      *
                      *
                      ******************************************************************************/
                      void USB_EP1_DMA_DONE_ISR(void)
                      {
              
                          USB_EPxDmaDone((uint8)USB_EP1_DMA_CH,
                                                                USB_EP1);
                              
                      }
                  #endif /* (USB_DMA1_ACTIVE) */
              
              
                  #if (USB_DMA2_ACTIVE)
                      /******************************************************************************
                      * Function Name: USB_EP2_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  Endpoint 2 DMA Done Interrupt Service Routine.
                      *
                      *
                      ******************************************************************************/
                      void USB_EP2_DMA_DONE_ISR(void)
                      {
              
                          USB_EPxDmaDone((uint8)USB_EP2_DMA_CH,
                                                                USB_EP2);
                      }
                  #endif /* (USB_DMA2_ACTIVE) */
              
              
                  #if (USB_DMA3_ACTIVE)
                      /******************************************************************************
                      * Function Name: USB_EP3_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  Endpoint 3 DMA Done Interrupt Service Routine.
                      *
                      *
                      ******************************************************************************/
                      void USB_EP3_DMA_DONE_ISR(void)
                      {
              
                          USB_EPxDmaDone((uint8)USB_EP3_DMA_CH,
                                                                USB_EP3);
                      }
                  #endif /* (USB_DMA3_ACTIVE) */
              
              
                  #if (USB_DMA4_ACTIVE)
                      /******************************************************************************
                      * Function Name: USB_EP4_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  Endpoint 4 DMA Done Interrupt Service Routine.
                      *
                      *
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 19  

                      ******************************************************************************/
                      void USB_EP4_DMA_DONE_ISR(void)
                      {
              
                          USB_EPxDmaDone((uint8)USB_EP4_DMA_CH,
                                                                USB_EP4);
                      }
                  #endif /* (USB_DMA4_ACTIVE) */
              
              
                  #if (USB_DMA5_ACTIVE)
                      /******************************************************************************
                      * Function Name: USB_EP5_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  Endpoint 5 DMA Done Interrupt Service Routine.
                      *
                      *
                      ******************************************************************************/
                      void USB_EP5_DMA_DONE_ISR(void)
                      {
              
                          USB_EPxDmaDone((uint8)USB_EP5_DMA_CH,
                                                                USB_EP5);
                      }
                  #endif /* (USB_DMA5_ACTIVE) */
              
              
                  #if (USB_DMA6_ACTIVE)
                      /******************************************************************************
                      * Function Name: USB_EP6_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  Endpoint 6 DMA Done Interrupt Service Routine.
                      *
                      *
                      ******************************************************************************/
                      void USB_EP6_DMA_DONE_ISR(void)
                      {
              
                          USB_EPxDmaDone((uint8)USB_EP6_DMA_CH,
                                                                USB_EP6);
                      }
                  #endif /* (USB_DMA6_ACTIVE) */
              
              
                  #if (USB_DMA7_ACTIVE)
                      /******************************************************************************
                      * Function Name: USB_EP7_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  Endpoint 7 DMA Done Interrupt Service Routine.
                      *
                      *
                      ******************************************************************************/
                      void USB_EP7_DMA_DONE_ISR(void)
                      {
              
                          USB_EPxDmaDone((uint8)USB_EP7_DMA_CH,
                                                                USB_EP7);
                      }
                  #endif /* (USB_DMA7_ACTIVE) */
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 20  

              
              
                  #if (USB_DMA8_ACTIVE)
                      /******************************************************************************
                      * Function Name: USB_EP8_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  Endpoint 8 DMA Done Interrupt Service Routine.
                      *
                      *
                      ******************************************************************************/
                      void USB_EP8_DMA_DONE_ISR(void)
                      {
              
                          USB_EPxDmaDone((uint8)USB_EP8_DMA_CH,
                                                                USB_EP8);
                      }
                  #endif /* (USB_DMA8_ACTIVE) */
              
              
              #else
                  #if (USB_EP_DMA_AUTO_OPT == 0u)
                      /******************************************************************************
                      * Function Name: USB_EP_DMA_DONE_ISR
                      ***************************************************************************//**
                      *
                      *  DMA Done Interrupt Service Routine.
                      *
                      *
                      ******************************************************************************/
                      CY_ISR(USB_EP_DMA_DONE_ISR)
                      {
                          uint8 int8Status;
                          uint8 int17Status;
                          uint8 ep_status;
                          uint8 ep = USB_EP1;
              
                      #ifdef USB_EP_DMA_DONE_ISR_ENTRY_CALLBACK
                          USB_EP_DMA_DONE_ISR_EntryCallback();
                      #endif /* (USB_EP_DMA_DONE_ISR_ENTRY_CALLBACK) */
              
                          /* `#START EP_DMA_DONE_BEGIN_USER_CODE` Place your code here */
              
                          /* `#END` */
              
                          /* Read clear on read status register with EP source of interrupt. */
                          int17Status = USB_EP17_DMA_Done_SR_Read() & USB_EP17_SR_MASK;
                          int8Status  = USB_EP8_DMA_Done_SR_Read()  & USB_EP8_SR_MASK;
              
                          while (int8Status != 0u)
                          {
                              while (int17Status != 0u)
                              {
                                  if ((int17Status & 1u) != 0u)  /* If EpX interrupt present. */
                                  {
                                      /* Read Endpoint Status Register. */
                                      ep_status = USB_ARB_EP_BASE.arbEp[ep].epSr;
              
                                      if ((0u == (ep_status & USB_ARB_EPX_SR_IN_BUF_FULL)) &&
                                          (0u ==USB_inBufFull[ep]))
                                      {
                                          /* `#START EP_DMA_DONE_USER_CODE` Place your code here */
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 21  

              
                                          /* `#END` */
              
                                      #ifdef USB_EP_DMA_DONE_ISR_CALLBACK
                                          USB_EP_DMA_DONE_ISR_Callback();
                                      #endif /* (USB_EP_DMA_DONE_ISR_CALLBACK) */
              
                                          /* Transfer again 2 last bytes into pre-fetch endpoint area. */
                                          USB_ARB_EP_BASE.arbEp[ep].rwWaMsb = 0u;
                                          USB_ARB_EP_BASE.arbEp[ep].rwWa = (USB_DMA_BYTES_PER_BURST * ep) - USB_DMA_BYTE
             -S_REPEAT;
                                          USB_LoadNextInEP(ep, 1u);
              
                                          /* Set Data ready status to generate DMA request. */
                                          USB_ARB_EP_BASE.arbEp[ep].epCfg |= USB_ARB_EPX_CFG_IN_DATA_RDY;
                                      }
                                  }
              
                                  ep++;
                                  int17Status >>= 1u;
                              }
              
                              int8Status >>= 1u;
              
                              if (int8Status != 0u)
                              {
                                  /* Prepare pointer for EP8. */
                                  ep = USB_EP8;
                                  int17Status = int8Status & 0x01u;
                              }
                          }
              
                          /* `#START EP_DMA_DONE_END_USER_CODE` Place your code here */
              
                          /* `#END` */
              
                  #ifdef USB_EP_DMA_DONE_ISR_EXIT_CALLBACK
                      USB_EP_DMA_DONE_ISR_ExitCallback();
                  #endif /* (USB_EP_DMA_DONE_ISR_EXIT_CALLBACK) */
                      }
                  #endif /* (USB_EP_DMA_AUTO_OPT == 0u) */
              #endif /* (CY_PSOC4) */
              #endif /* (USB_EP_MANAGEMENT_DMA_AUTO) */
1262          
1263          
1264          #if (CY_PSOC4)
                  /***************************************************************************
                  * Function Name: USB_IntrHandler
                  ************************************************************************//**
                  *
                  *   Interrupt handler for Hi/Mid/Low ISRs.
                  *
                  *  regCause - The cause register of interrupt. One of the three variants:
                  *       USB_INTR_CAUSE_LO_REG - Low interrupts.
                  *       USB_INTR_CAUSE_MED_REG - Med interrupts.
                  *       USB_INTR_CAUSE_HI_REG - - High interrupts.
                  *
                  *
                  ***************************************************************************/
                  CY_INLINE static void USB_IntrHandler(uint32 intrCause)
                  {
                      /* Array of pointers to component interrupt handlers. */
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 22  

                      static const cyisraddress USB_isrCallbacks[] =
                      {
              
                      };
              
                      uint32 cbIdx = 0u;
              
                      /* Check arbiter interrupt source first. */
                      if (0u != (intrCause & USB_INTR_CAUSE_ARB_INTR))
                      {
                          USB_isrCallbacks[USB_ARB_EP_INTR_NUM]();
                      }
              
                      /* Check all other interrupt sources (except arbiter and resume). */
                      intrCause = (intrCause  & USB_INTR_CAUSE_CTRL_INTR_MASK) |
                                  ((intrCause & USB_INTR_CAUSE_EP1_8_INTR_MASK) >>
                                                USB_INTR_CAUSE_EP_INTR_SHIFT);
              
                      /* Call interrupt handlers for active interrupt sources. */
                      while (0u != intrCause)
                      {
                          if (0u != (intrCause & 0x1u))
                          {
                               USB_isrCallbacks[cbIdx]();
                          }
              
                          intrCause >>= 1u;
                          ++cbIdx;
                      }
                  }
              
              
                  /***************************************************************************
                  * Function Name: USB_INTR_HI_ISR
                  ************************************************************************//**
                  *
                  *   Interrupt Service Routine for the high group of the interrupt sources.
                  *
                  *
                  ***************************************************************************/
                  CY_ISR(USB_INTR_HI_ISR)
                  {
                      USB_IntrHandler(USB_INTR_CAUSE_HI_REG);
                  }
              
                  /***************************************************************************
                  * Function Name: USB_INTR_MED_ISR
                  ************************************************************************//**
                  *
                  *   Interrupt Service Routine for the medium group of the interrupt sources.
                  *
                  *
                  ***************************************************************************/
                  CY_ISR(USB_INTR_MED_ISR)
                  {
                     USB_IntrHandler(USB_INTR_CAUSE_MED_REG);
                  }
              
                  /***************************************************************************
                  * Function Name: USB_INTR_LO_ISR
                  ************************************************************************//**
                  *
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 23  

                  *   Interrupt Service Routine for the low group of the interrupt sources.
                  *
                  *
                  ***************************************************************************/
                  CY_ISR(USB_INTR_LO_ISR)
                  {
                      USB_IntrHandler(USB_INTR_CAUSE_LO_REG);
                  }
              #endif /* (CY_PSOC4) */
1352          
1353          
1354          /* [] END OF FILE */
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 24  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USB_EP_1_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 37
                                           ; SOURCE LINE # 55
001D 90600B            MOV     DPTR,#0600BH
0020 7401              MOV     A,#01H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 66
0023 90600E            MOV     DPTR,#0600EH
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 69
0028 900000      E     MOV     DPTR,#USB_EP+0BH
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 5403              ANL     A,#03H
0030 FF                MOV     R7,A
0031 7E00              MOV     R6,#00H
0033 EF                MOV     A,R7
0034 6401              XRL     A,#01H
0036 4E                ORL     A,R6
0037 600E              JZ      ?C0004
                                           ; SOURCE LINE # 70
                                           ; SOURCE LINE # 71
0039 900000      E     MOV     DPTR,#USB_EP+0EH
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F 6480              XRL     A,#080H
0041 FF                MOV     R7,A
0042 900000      E     MOV     DPTR,#USB_EP+0EH
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
0047         ?C0004:
                                           ; SOURCE LINE # 80
0047 900000      E     MOV     DPTR,#USB_EP+0CH
004A 7401              MOV     A,#01H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 107
004D D007              POP     AR7
004F D006              POP     AR6
0051 D0D0              POP     PSW
0053 D000        E     POP     ?C?XPAGE1SFR
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 25  

0055 D086              POP     DPS
0057 D084              POP     DPL1
0059 D085              POP     DPH1
005B D082              POP     DPL
005D D083              POP     DPH
005F D0E0              POP     ACC
0061 32                RETI    
             ; FUNCTION USB_EP_1_ISR (END)

             ; FUNCTION USB_EP_2_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C085              PUSH    DPH1
0008 C084              PUSH    DPL1
000A C086              PUSH    DPS
000C 758600            MOV     DPS,#00H
000F C000        E     PUSH    ?C?XPAGE1SFR
0011 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0014 C0D0              PUSH    PSW
0016 75D000            MOV     PSW,#00H
0019 C006              PUSH    AR6
001B C007              PUSH    AR7
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 137
001D 90600B            MOV     DPTR,#0600BH
0020 7402              MOV     A,#02H
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 148
0023 90601E            MOV     DPTR,#0601EH
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
                                           ; SOURCE LINE # 151
0028 900000      E     MOV     DPTR,#USB_EP+016H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 5403              ANL     A,#03H
0030 FF                MOV     R7,A
0031 7E00              MOV     R6,#00H
0033 EF                MOV     A,R7
0034 6401              XRL     A,#01H
0036 4E                ORL     A,R6
0037 600E              JZ      ?C0009
                                           ; SOURCE LINE # 152
                                           ; SOURCE LINE # 153
0039 900000      E     MOV     DPTR,#USB_EP+019H
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F 6480              XRL     A,#080H
0041 FF                MOV     R7,A
0042 900000      E     MOV     DPTR,#USB_EP+019H
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0047         ?C0009:
                                           ; SOURCE LINE # 162
0047 900000      E     MOV     DPTR,#USB_EP+017H
004A 7401              MOV     A,#01H
004C F0                MOVX    @DPTR,A
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 26  

                                           ; SOURCE LINE # 163
                                           ; SOURCE LINE # 189
004D D007              POP     AR7
004F D006              POP     AR6
0051 D0D0              POP     PSW
0053 D000        E     POP     ?C?XPAGE1SFR
0055 D086              POP     DPS
0057 D084              POP     DPL1
0059 D085              POP     DPH1
005B D082              POP     DPL
005D D083              POP     DPH
005F D0E0              POP     ACC
0061 32                RETI    
             ; FUNCTION USB_EP_2_ISR (END)

             ; FUNCTION USB_SOF_ISR (BEGIN)
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 708
0000 32                RETI    
             ; FUNCTION USB_SOF_ISR (END)

             ; FUNCTION USB_BUS_RESET_ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 732
                                           ; SOURCE LINE # 734
002B 120000      E     LCALL   USB_ReInitComponent
                                           ; SOURCE LINE # 739
002E D007              POP     AR7
0030 D006              POP     AR6
0032 D005              POP     AR5
0034 D004              POP     AR4
0036 D003              POP     AR3
0038 D002              POP     AR2
003A D001              POP     AR1
003C D000              POP     AR0
003E D0D0              POP     PSW
0040 D000        E     POP     ?C?XPAGE1SFR
0042 D086              POP     DPS
0044 D084              POP     DPL1
0046 D085              POP     DPH1
0048 D082              POP     DPL
C51 COMPILER V9.51   USB_EPISR                                                             07/22/2017 09:26:21 PAGE 27  

004A D083              POP     DPH
004C D0F0              POP     B
004E D0E0              POP     ACC
0050 32                RETI    
             ; FUNCTION USB_BUS_RESET_ISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    278    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
