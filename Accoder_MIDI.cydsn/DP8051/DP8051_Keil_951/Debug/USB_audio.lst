C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE USB_AUDIO
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\USB_audio.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\USB_audio.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(
                    -.\DP8051\DP8051_Keil_951\Debug/USB_audio.lst) CD OT(2,SIZE) OJ(.\DP8051\DP8051_Keil_951\Debug\USB_audio.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file USB_audio.c
   3          * \version 3.10
   4          *
   5          * \brief
   6          *  This file contains the USB AUDIO Class request handler.
   7          *
   8          * Related Document:
   9          *  Universal Serial Bus Device Class Definition for Audio Devices Release 1.0
  10          *
  11          ********************************************************************************
  12          * \copyright
  13          * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "USB_audio.h"
  20          #include "USB_pvt.h"
  21          #include "cyapicallbacks.h"
  22          
  23          #if defined(USB_ENABLE_AUDIO_CLASS)
  24          
  25          /***************************************
  26          * Custom Declarations
  27          ***************************************/
  28          
  29          /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  30          
  31          /* `#END` */
  32          
  33          
  34          #if !defined(USER_SUPPLIED_AUDIO_HANDLER)
  35          
  36          /***************************************
  37          *    AUDIO Variables
  38          ***************************************/
  39          
  40          #if defined(USB_ENABLE_AUDIO_STREAMING)
                  /** Contains the current audio sample frequency. It is set by the host using a SET_CUR request to the 
             -endpoint.*/
                  volatile uint8 USB_currentSampleFrequency[USB_MAX_EP][USB_SAMPLE_FREQ_LEN];
                  /** Used as a flag for the user code, to inform it that the host has been sent a request 
                   * to change the sample frequency. The sample frequency will be sent on the next OUT transaction. 
                   * It contains the endpoint address when set. The following code is recommended for 
                   * detecting new sample frequency in main code:
                   * \snippet  /USBFS_sut_02.cydsn/main.c Detecting new Sample Frequency
                   *     
                   * The USBFS_transferState variable is checked to make sure that the transfer completes. */
                  volatile uint8 USB_frequencyChanged;
                  /** Contains the mute configuration set by the host.*/
                  volatile uint8 USB_currentMute;
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 2   

                  /** Contains the volume level set by the host.*/
                  volatile uint8 USB_currentVolume[USB_VOLUME_LEN];
                  volatile uint8 USB_minimumVolume[USB_VOLUME_LEN] = {USB_VOL_MIN_LSB,
                                                                                                USB_VOL_MIN_MSB};
                  volatile uint8 USB_maximumVolume[USB_VOLUME_LEN] = {USB_VOL_MAX_LSB,
                                                                                                USB_VOL_MAX_MSB};
                  volatile uint8 USB_resolutionVolume[USB_VOLUME_LEN] = {USB_VOL_RES_LSB,
                                                                                                   USB_VOL_RES_MSB};
              #endif /*  USB_ENABLE_AUDIO_STREAMING */
  62          
  63          
  64          /*******************************************************************************
  65          * Function Name: USB_DispatchAUDIOClassRqst
  66          ****************************************************************************//**
  67          *
  68          *  This routine dispatches class requests
  69          *
  70          * \return
  71          *  Results of Audio Class request handling: 
  72          *  - USB_TRUE  - request was handled without errors
  73          *  - USB_FALSE - error occurs during handling of request     
  74          *
  75          * \globalvars
  76          *   USB_currentSampleFrequency: Contains the current audio Sample
  77          *       Frequency. It is set by the Host using SET_CUR request to the endpoint.
  78          *   USB_frequencyChanged: This variable is used as a flag for the
  79          *       user code, to be aware that Host has been sent request for changing
  80          *       Sample Frequency. Sample frequency will be sent on the next OUT
  81          *       transaction. It is contains endpoint address when set. The following
  82          *       code is recommended for detecting new Sample Frequency in main code:
  83          *       
  84          *  \snippet  /USBFS_sut_02.cydsn/main.c Detecting new Sample Frequency
  85          *      
  86          *   USB_transferState variable is checked to be sure that transfer
  87          *              completes.
  88          *   USB_currentMute: Contains mute configuration set by Host.
  89          *   USB_currentVolume: Contains volume level set by Host.
  90          *
  91          * \reentrant
  92          *  No.
  93          *
  94          *******************************************************************************/
  95          uint8 USB_DispatchAUDIOClassRqst(void) 
  96          {
  97   1          uint8 requestHandled = USB_FALSE;
  98   1          
  99   1          uint8 RqstRcpt = (uint8)(USB_bmRequestTypeReg & USB_RQST_RCPT_MASK);
 100   1      #if defined(USB_ENABLE_AUDIO_STREAMING)
                  uint8 wValueHi = (uint8) USB_wValueHiReg;
                  uint8 epNumber = (uint8) USB_wIndexLoReg & USB_DIR_UNUSED;
              #endif /* (USB_ENABLE_AUDIO_STREAMING) */
 104   1          
 105   1          /* Check request direction: D2H or H2D. */
 106   1          if (0u != (USB_bmRequestTypeReg & USB_RQST_DIR_D2H))
 107   1          {
 108   2              /* Handle direction from device to host. */
 109   2              
 110   2              if (USB_RQST_RCPT_EP == RqstRcpt)
 111   2              {
 112   3                  /* Request recipient is to endpoint. */
 113   3                  switch (USB_bRequestReg)
 114   3                  {
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 3   

 115   4                      case USB_GET_CUR:
 116   4                      #if defined(USB_ENABLE_AUDIO_STREAMING)
                                  if (wValueHi == USB_SAMPLING_FREQ_CONTROL)
                                  {
                                       /* point Control Selector is Sampling Frequency */
                                      USB_currentTD.wCount = USB_SAMPLE_FREQ_LEN;
                                      USB_currentTD.pData  = USB_currentSampleFrequency[epNumber];
                                      
                                      requestHandled   = USB_InitControlRead();
                                  }
                              #endif /* (USB_ENABLE_AUDIO_STREAMING) */
 126   4                      
 127   4                          /* `#START AUDIO_READ_REQUESTS` Place other request handler here */
 128   4      
 129   4                          /* `#END` */
 130   4                      
 131   4                      #ifdef USB_DISPATCH_AUDIO_CLASS_AUDIO_READ_REQUESTS_CALLBACK    
                                  USB_DispatchAUDIOClass_AUDIO_READ_REQUESTS_Callback();
                              #endif /* (USB_DISPATCH_AUDIO_CLASS_AUDIO_READ_REQUESTS_CALLBACK) */                   
 134   4                      break;
 135   4                      
 136   4                      default:
 137   4                          /* Do not handle this request unless callback is defined. */
 138   4                          break;
 139   4                  }
 140   3              
 141   3              }
 142   2              else if (USB_RQST_RCPT_IFC == RqstRcpt)
 143   2              {
 144   3                  /* Request recipient is interface or entity ID. */
 145   3                  switch (USB_bRequestReg)
 146   3                  {
 147   4                      case USB_GET_CUR:
 148   4                      #if defined(USB_ENABLE_AUDIO_STREAMING)
                                  if (wValueHi == USB_MUTE_CONTROL)
                                  {
                                      /* `#START MUTE_CONTROL_GET_REQUEST` Place multi-channel handler here */
              
                                      /* `#END` */
              
                                  #ifdef USB_DISPATCH_AUDIO_CLASS_MUTE_CONTROL_GET_REQUEST_CALLBACK
                                      USB_DispatchAUDIOClass_MUTE_CONTROL_GET_REQUEST_Callback();
                                  #endif /* (USB_DISPATCH_AUDIO_CLASS_MUTE_CONTROL_GET_REQUEST_CALLBACK) */
              
                                      /* Entity ID Control Selector is MUTE */
                                      USB_currentTD.wCount = 1u;
                                      USB_currentTD.pData  = &USB_currentMute;
                                      
                                      requestHandled = USB_InitControlRead();
                                  }
                                  else if (wValueHi == USB_VOLUME_CONTROL)
                                  {
                                      /* `#START VOLUME_CONTROL_GET_REQUEST` Place multi-channel handler here */
              
                                      /* `#END` */
              
                                  #ifdef USB_DISPATCH_AUDIO_CLASS_VOLUME_CONTROL_GET_REQUEST_CALLBACK
                                      USB_DispatchAUDIOClass_VOLUME_CONTROL_GET_REQUEST_Callback();
                                  #endif /* (USB_DISPATCH_AUDIO_CLASS_VOLUME_CONTROL_GET_REQUEST_CALLBACK) */
              
                                      /* Entity ID Control Selector is VOLUME, */
                                      USB_currentTD.wCount = USB_VOLUME_LEN;
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 4   

                                      USB_currentTD.pData  = USB_currentVolume;
                                      
                                      requestHandled = USB_InitControlRead();
                                  }
                                  else
                                  {
                                      /* `#START OTHER_GET_CUR_REQUESTS` Place other request handler here */
              
                                      /* `#END` */
              
                                  #ifdef USB_DISPATCH_AUDIO_CLASS_OTHER_GET_CUR_REQUESTS_CALLBACK
                                      USB_DispatchAUDIOClass_OTHER_GET_CUR_REQUESTS_Callback();
                                  #endif /* (USB_DISPATCH_AUDIO_CLASS_OTHER_GET_CUR_REQUESTS_CALLBACK) */
                                  }
                                  break;
                                  
                              case USB_GET_MIN:
                                  if (wValueHi == USB_VOLUME_CONTROL)
                                  {
                                      /* Entity ID Control Selector is VOLUME, */
                                      USB_currentTD.wCount = USB_VOLUME_LEN;
                                      USB_currentTD.pData  = &USB_minimumVolume[0];
                                      
                                      requestHandled = USB_InitControlRead();
                                  }
                                  break;
                                  
                              case USB_GET_MAX:
                                  if (wValueHi == USB_VOLUME_CONTROL)
                                  {
                                      /* Entity ID Control Selector is VOLUME, */
                                      USB_currentTD.wCount = USB_VOLUME_LEN;
                                      USB_currentTD.pData  = &USB_maximumVolume[0];
                                      
                                      requestHandled = USB_InitControlRead();
                                  }
                                  break;
                                  
                              case USB_GET_RES:
                                  if (wValueHi == USB_VOLUME_CONTROL)
                                  {
                                       /* Entity ID Control Selector is VOLUME, */
                                      USB_currentTD.wCount = USB_VOLUME_LEN;
                                      USB_currentTD.pData  = &USB_resolutionVolume[0];
                                      
                                      requestHandled   = USB_InitControlRead();
                                  }
                                  break;
                                  
                              /* The contents of the status message is reserved for future use.
                              * For the time being, a null packet should be returned in the data stage of the
                              * control transfer, and the received null packet should be ACKed.
                              */
                              case USB_GET_STAT:
                                  USB_currentTD.wCount = 0u;    
                                  
                                  requestHandled = USB_InitControlWrite();
              
                              #endif /* (USB_ENABLE_AUDIO_STREAMING) */
 236   4                      
 237   4                          /* `#START AUDIO_WRITE_REQUESTS` Place other request handler here */
 238   4      
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 5   

 239   4                          /* `#END` */
 240   4                      
 241   4                      #ifdef USB_DISPATCH_AUDIO_CLASS_AUDIO_WRITE_REQUESTS_CALLBACK
                                  USB_DispatchAUDIOClass_AUDIO_WRITE_REQUESTS_Callback();
                              #endif /* (USB_DISPATCH_AUDIO_CLASS_AUDIO_WRITE_REQUESTS_CALLBACK) */
 244   4                          break;
 245   4                      
 246   4                      default:
 247   4                          /* Do not handle this request. */
 248   4                          break;
 249   4                  }
 250   3              }
 251   2              else
 252   2              {   
 253   3                  /* Do not handle other requests recipients. */
 254   3              }
 255   2          }
 256   1          else
 257   1          {
 258   2              /* Handle direction from host to device. */
 259   2              
 260   2              if (USB_RQST_RCPT_EP == RqstRcpt)
 261   2              {
 262   3                  /* Request recipient is endpoint. */
 263   3                  switch (USB_bRequestReg)
 264   3                  {
 265   4                      case USB_SET_CUR:
 266   4                      #if defined(USB_ENABLE_AUDIO_STREAMING)
                                  if (wValueHi == USB_SAMPLING_FREQ_CONTROL)
                                  {
                                       /* point Control Selector is Sampling Frequency */
                                      USB_currentTD.wCount = USB_SAMPLE_FREQ_LEN;
                                      USB_currentTD.pData  = USB_currentSampleFrequency[epNumber];
                                      USB_frequencyChanged = (uint8) epNumber;
                                      
                                      requestHandled   = USB_InitControlWrite();
                                  }
                              #endif /* (USB_ENABLE_AUDIO_STREAMING) */
 277   4      
 278   4                          /* `#START AUDIO_SAMPLING_FREQ_REQUESTS` Place other request handler here */
 279   4      
 280   4                          /* `#END` */
 281   4      
 282   4                      #ifdef USB_DISPATCH_AUDIO_CLASS_AUDIO_SAMPLING_FREQ_REQUESTS_CALLBACK
                                  USB_DispatchAUDIOClass_AUDIO_SAMPLING_FREQ_REQUESTS_Callback();
                              #endif /* (USB_DISPATCH_AUDIO_CLASS_AUDIO_SAMPLING_FREQ_REQUESTS_CALLBACK) */
 285   4                          break;
 286   4                      
 287   4                      default:
 288   4                          /* Do not handle this request. */
 289   4                          break;
 290   4                  }
 291   3              }
 292   2              else if(USB_RQST_RCPT_IFC == RqstRcpt)
 293   2              {
 294   3                  /* Request recipient is interface or entity ID. */
 295   3                  switch (USB_bRequestReg)
 296   3                  {
 297   4                      case USB_SET_CUR:
 298   4                      #if defined(USB_ENABLE_AUDIO_STREAMING)
                                  if (wValueHi == USB_MUTE_CONTROL)
                                  {
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 6   

                                      /* `#START MUTE_SET_REQUEST` Place multi-channel handler here */
              
                                      /* `#END` */
              
                                  #ifdef USB_DISPATCH_AUDIO_CLASS_MUTE_SET_REQUEST_CALLBACK
                                      USB_DispatchAUDIOClass_MUTE_SET_REQUEST_Callback();
                                  #endif /* (USB_DISPATCH_AUDIO_CLASS_MUTE_SET_REQUEST_CALLBACK) */
              
                                      /* Entity ID Control Selector is MUTE */
                                      USB_currentTD.wCount = 1u;
                                      USB_currentTD.pData  = &USB_currentMute;
                                      
                                      requestHandled = USB_InitControlWrite();
                                  }
                                  else if (wValueHi == USB_VOLUME_CONTROL)
                                  {
                                      /* `#START VOLUME_CONTROL_SET_REQUEST` Place multi-channel handler here */
              
                                      /* `#END` */
              
                                  #ifdef USB_DISPATCH_AUDIO_CLASS_VOLUME_CONTROL_SET_REQUEST_CALLBACK
                                      USB_DispatchAUDIOClass_VOLUME_CONTROL_SET_REQUEST_Callback();
                                  #endif /* (USB_DISPATCH_AUDIO_CLASS_VOLUME_CONTROL_SET_REQUEST_CALLBACK) */
              
                                      /* Entity ID Control Selector is VOLUME */
                                      USB_currentTD.wCount = USB_VOLUME_LEN;
                                      USB_currentTD.pData  = USB_currentVolume;
                                      
                                      requestHandled = USB_InitControlWrite();
                                  }
                                  else
                                  {
                                      /* `#START OTHER_SET_CUR_REQUESTS` Place other request handler here */
              
                                      /* `#END` */
              
                                  #ifdef USB_DISPATCH_AUDIO_CLASS_OTHER_SET_CUR_REQUESTS_CALLBACK
                                      USB_DispatchAUDIOClass_OTHER_SET_CUR_REQUESTS_Callback();
                                  #endif /* (USB_DISPATCH_AUDIO_CLASS_OTHER_SET_CUR_REQUESTS_CALLBACK) */
                                  }
                              #endif /*  USB_ENABLE_AUDIO_STREAMING */
 342   4                      
 343   4                      
 344   4                          /* `#START AUDIO_CONTROL_SEL_REQUESTS` Place other request handler here */
 345   4      
 346   4                          /* `#END` */
 347   4                          
 348   4                      #ifdef USB_DISPATCH_AUDIO_CLASS_AUDIO_CONTROL_SEL_REQUESTS_CALLBACK
                                  USB_DispatchAUDIOClass_AUDIO_CONTROL_SEL_REQUESTS_Callback();
                              #endif /* (USB_DISPATCH_AUDIO_CLASS_AUDIO_CONTROL_SEL_REQUESTS_CALLBACK) */
 351   4                      break;
 352   4      
 353   4                      default:
 354   4                          /* Do not handle this request. */
 355   4                      break;
 356   4                  }
 357   3              }
 358   2              else
 359   2              {
 360   3                  /* Do not handle other requests recipients. */
 361   3              }
 362   2          }
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 7   

 363   1      
 364   1          return (requestHandled);
 365   1      }
 366          #endif /* (USER_SUPPLIED_AUDIO_HANDLER) */
 367          
 368          
 369          /*******************************************************************************
 370          * Additional user functions supporting AUDIO Requests
 371          ********************************************************************************/
 372          
 373          /* `#START AUDIO_FUNCTIONS` Place any additional functions here */
 374          
 375          /* `#END` */
 376          
 377          #endif  /* (USB_ENABLE_AUDIO_CLASS) */
 378          
 379          
 380          /* [] END OF FILE */
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 8   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION USB_DispatchAUDIOClassRqst (BEGIN)
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
0000 900000      R     MOV     DPTR,#requestHandled
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
0005 906000            MOV     DPTR,#06000H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5403              ANL     A,#03H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#RqstRcpt
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0013 906000            MOV     DPTR,#06000H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 5480              ANL     A,#080H
001B FF                MOV     R7,A
001C 7E00              MOV     R6,#00H
001E EF                MOV     A,R7
001F 4E                ORL     A,R6
0020 603B              JZ      ?C0001
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 110
0022 900000      R     MOV     DPTR,#RqstRcpt
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 B40214            CJNE    A,#02H,?C0002
                                           ; SOURCE LINE # 111
                                           ; SOURCE LINE # 113
002B 906001            MOV     DPTR,#06001H
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 120000      E     LCALL   ?C?CCASE
0034 0000        R     DW      ?C0012
0036 81                DB      081H
0037 0000              DW      00H
0039 0000        R     DW      ?C0012
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 138
003B 8056              SJMP    ?C0012
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 141
003D 8054              SJMP    ?C0012
003F         ?C0002:
                                           ; SOURCE LINE # 142
003F 900000      R     MOV     DPTR,#RqstRcpt
0042 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 9   

0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 6401              XRL     A,#01H
0047 704A              JNZ     ?C0012
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 145
0049 906001            MOV     DPTR,#06001H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 120000      E     LCALL   ?C?CCASE
0052 0000        R     DW      ?C0012
0054 81                DB      081H
0055 0000              DW      00H
0057 0000        R     DW      ?C0012
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 246
                                           ; SOURCE LINE # 248
0059 8038              SJMP    ?C0012
                                           ; SOURCE LINE # 249
                                           ; SOURCE LINE # 250
005B 8036              SJMP    ?C0012
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 254
                                           ; SOURCE LINE # 255
005D         ?C0001:
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 260
005D 900000      R     MOV     DPTR,#RqstRcpt
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 EF                MOV     A,R7
0063 B40214            CJNE    A,#02H,?C0013
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 263
0066 906001            MOV     DPTR,#06001H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 120000      E     LCALL   ?C?CCASE
006F 0000        R     DW      ?C0012
0071 01                DB      01H
0072 0000              DW      00H
0074 0000        R     DW      ?C0012
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
                                           ; SOURCE LINE # 285
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 289
0076 801B              SJMP    ?C0012
                                           ; SOURCE LINE # 290
                                           ; SOURCE LINE # 291
0078 8019              SJMP    ?C0012
007A         ?C0013:
                                           ; SOURCE LINE # 292
007A 900000      R     MOV     DPTR,#RqstRcpt
007D E0                MOVX    A,@DPTR
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 B40110            CJNE    A,#01H,?C0012
C51 COMPILER V9.51   USB_AUDIO                                                             07/22/2017 09:26:19 PAGE 10  

                                           ; SOURCE LINE # 293
                                           ; SOURCE LINE # 295
0083 906001            MOV     DPTR,#06001H
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 120000      E     LCALL   ?C?CCASE
008C 0000        R     DW      ?C0012
008E 01                DB      01H
008F 0000              DW      00H
0091 0000        R     DW      ?C0012
                                           ; SOURCE LINE # 296
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
0093         ?C0012:
                                           ; SOURCE LINE # 364
0093 900000      R     MOV     DPTR,#requestHandled
0096 E0                MOVX    A,@DPTR
0097 FF                MOV     R7,A
                                           ; SOURCE LINE # 365
0098         ?C0023:
0098 22                RET     
             ; FUNCTION USB_DispatchAUDIOClassRqst (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    153    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
